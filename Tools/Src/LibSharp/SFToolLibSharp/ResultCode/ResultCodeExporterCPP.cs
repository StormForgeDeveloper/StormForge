////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : 
//
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using SF;
using SF.Table;

using System.IO;
using System.Diagnostics;


namespace SF
{
    public class ResultCodeExporterCPP
    {
        ResultCodes m_Codes;
        Stream m_OutputStream;
        string m_HeaderFileName;


        public ResultCodeExporterCPP(string headerFileName)
        {
            m_HeaderFileName = headerFileName;
        }

        public void Export(ResultCodes Codes, Stream outputStream)
        {
            m_OutputStream = outputStream;

            StringBuilder output = new StringBuilder();

            //m_Facilities = Facilities;
            m_Codes = Codes;

            WritePreamble(output);
            WriteBody(output);
            WritePostamble(output);

            WriteToOutputHeader(output);
        }

        void WritePreamble(StringBuilder output)
        {
            output.Append("////////////////////////////////////////////////////////////////////////////////\n");
            output.Append("// \n");
            output.Append("// CopyRight (c) Kyungkun Ko\n");
            output.Append("// \n");
            output.Append("// Author : KyungKun Ko\n");
            output.Append("//\n");
            output.AppendFormat("// Description : Autogenerated header, {0}\n", m_Codes.Facility);
            output.Append("//\n");
            output.Append("////////////////////////////////////////////////////////////////////////////////\n");
            output.AppendLine("");
            output.AppendLine("#include \"SFTypedefs.h\"");
            output.AppendLine("#include \"ResultCode/SFResultTable.h\"");
            output.AppendFormat("#include \"ResultCode/{0}\"\n", m_HeaderFileName);
            output.AppendLine("");
            output.AppendLine("");
        }

        void WriteBody(StringBuilder output)
        {
            var facility = m_Codes.Facility;
            var facilityUpr = facility.ToUpper();

            output.AppendLine("");
            output.AppendLine("namespace SF {");
            output.AppendLine("namespace ResultCode {");
            output.AppendLine("");
            output.AppendFormat("\tvoid InitializeResultCode{0}() {{\n", facility);
            output.AppendLine("");

            output.AppendFormat("\t\tauto& codeMap = ResultTable::GetOrAddFacility({0});\n", m_Codes.FacilityCode);

            foreach (var codeItem in m_Codes.ResultCodeItem)
            {
                var codeValue = codeItem.ResultCode;
                string strDefine = "";
                if (m_Codes.UseFacilityName)
                    strDefine = string.Format("{0}{1}_{2}", ResultCode.ServerityToDefineString(codeValue.Severity), facilityUpr, codeItem.CodeName.ToUpper());
                else
                    strDefine = string.Format("{0}{1}", ResultCode.ServerityToDefineString(codeValue.Severity), codeItem.CodeName.ToUpper());

                output.AppendFormat("\t\tcodeMap.Insert((uint32_t){0}, {{\"{1}\", \"{2}\"}});\n", strDefine, strDefine, string.IsNullOrEmpty(codeItem.Desc) ? "" : codeItem.Desc);
            }
            output.AppendLine("");
            output.AppendLine("\t}//InitializeResultCode ");

            //output.AppendFormat("\t\t}};//enum \n");
            output.AppendLine("}//namespace ResultCode ");
            output.AppendLine("}//namespace SF ");
            output.AppendLine("");
        }

        void WritePostamble(StringBuilder output)
        {
            output.AppendLine("");
            output.AppendLine("");
        }

        void WriteToOutputHeader(StringBuilder output)
        {
            string outputString = output.ToString();
            var fileData = Encoding.UTF8.GetBytes(outputString);
            var preamble = Encoding.UTF8.GetPreamble();

            m_OutputStream.Write(preamble, 0, preamble.Length);
            m_OutputStream.Write(fileData, 0, fileData.Length);
        }
    }
}
