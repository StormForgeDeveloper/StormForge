////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) 2016 Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : 
//
////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using SF;
using SF.Table;

using System.IO;
using System.Diagnostics;


namespace SF
{
    public class ResultCodeExporterH
    {
        ResultCodes m_Codes;
        Stream m_OutputStream;


        public void Export(ResultCodes Codes, Stream outputStream)
        {
            m_OutputStream = outputStream;

            StringBuilder output = new StringBuilder();

            //m_Facilities = Facilities;
            m_Codes = Codes;

            WritePreamble(output);
            WriteBody(output);
            WritePostamble(output);

            WriteToOutputHeader(output);
        }

        void WritePreamble(StringBuilder output)
        {
            output.Append("////////////////////////////////////////////////////////////////////////////////\n");
            output.Append("// \n");
            output.Append("// CopyRight (c) 2016 Kyungkun Ko\n");
            output.Append("// \n");
            output.Append("// Author : KyungKun Ko\n");
            output.Append("//\n");
            output.AppendFormat("// Description : Autogenerated header, {0}\n", m_Codes.Facility);
            output.Append("//\n");
            output.Append("////////////////////////////////////////////////////////////////////////////////\n");
            output.AppendLine("");
            output.AppendLine("#pragma once");
            output.AppendLine("#include <stdint.h>");
            output.AppendLine("");
            output.AppendLine("");
        }

        void WriteBody(StringBuilder output)
        {
            const int tabSize = 70;
            var facility = m_Codes.Facility;
            var facilityUpr = facility.ToUpper();

            output.AppendFormat("\n");
            output.AppendFormat("namespace SF {{\n");
            output.AppendFormat("\tnamespace ResultCode {{\n");
            output.AppendFormat("\n");
            //output.AppendFormat("\t\tenum {{\n");
            output.AppendFormat("\n");

            foreach (var codeItem in m_Codes.ResultCodeItem)
            {
                var codeValue = codeItem.ResultCode;

                string strDefine = "";
                if (m_Codes.UseFacilityName)
                    strDefine = $"\t\t\t{Result.ServerityToDefineString(codeValue.Severity)}{facilityUpr}_{codeItem.CodeName.ToUpper()}        ";
                else
                    strDefine = $"\t\t\t{Result.ServerityToDefineString(codeValue.Severity)}{codeItem.CodeName.ToUpper()}        ";

                output.AppendFormat("\n");
                output.AppendFormat("\t\t\t// {0} \n", string.IsNullOrEmpty(codeItem.Desc) ? "" : codeItem.Desc);
                output.AppendFormat("\t\t\tconstexpr Result {0}", strDefine);
                if(strDefine.Length <= tabSize)
                    output.Append(' ', tabSize - strDefine.Length);
                output.AppendFormat("((int32_t)0x{0:X8}L);\n", codeValue.Code);
            }


            output.AppendFormat("\n");
            output.AppendFormat("\tvoid InitializeResultCode{0}();\n", facility);
            output.AppendFormat("\n");
            
            output.AppendFormat("\t}}//namespace ResultCode \n");
            output.AppendFormat("}}//namespace SF \n");
            output.AppendFormat("\n");
        }

        void WritePostamble(StringBuilder output)
        {
            output.AppendLine("");
            output.AppendLine("");
            output.AppendLine("");
            output.AppendLine("");
        }

        void WriteToOutputHeader(StringBuilder output)
        {
            string outputString = output.ToString();
            var fileData = Encoding.UTF8.GetBytes(outputString);
            var preamble = Encoding.UTF8.GetPreamble();

            m_OutputStream.Write(preamble, 0, preamble.Length);
            m_OutputStream.Write(fileData, 0, fileData.Length);
        }
    }
}
