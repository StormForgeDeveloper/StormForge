 
namespace SF.Flat;


struct TimeSpan {
    milliseconds:long;
}

struct Time32
{
	time:uint32;
}


struct Time64
{
	time:uint64;
}

struct GameInstanceUID
{
    uid:uint32;
}

struct TransactionID
{
    transaction_id:ulong;
}

struct Vector4
{
	x:float;
	y:float;
	z:float;
	w:float;
}

struct UInt128
{
	low:uint64;
	high:uint64;
}

struct Guid
{
	low:uint64;
	high:uint64;
}

struct AccountID
{
	low:uint64;
	high:uint64;
}

struct CharacterID
{
	low:uint64;
	high:uint64;
}

table GenericError {
	transaction_id:uint64;
    result_code:int32;
	reason:string(required);
}

struct EntityUID
{
	entity_id:uint32;
}

enum Platform : byte
{
    BR,         // Braves player Id
    Steam,      // Steam player Id
    Facebook,   // Facebook player Id
}

struct PlayerPlatformID
{
	player_id:AccountID;
	platform_data:Platform;
}

table PlayerInformation
{
	player_id:AccountID;
	player_platform_id:PlayerPlatformID(required);
	profile_name:string;
	last_active_time:uint64;
}

table TotalRankingPlayerInformation
{
	ranking_id:uint32;
	ranking:uint32;
	player_id:AccountID;
	player_platform_id:PlayerPlatformID(required);
	profile_name:string;
	level:uint32;
	score_low:uint32;
	score_high:uint32;
}

struct AchievementStat
{
	achievement_stat_id:uint32;
	stat_value:int32;
}

// deprecated
enum GameStateID : byte 
{
	None,
	Red, 
	Green, 
	Blue
}

struct MatchingQueueTicket
{
	queue_uid:uint64;
	queue_item_id:uint64;
}

struct ActorMovement
{
	position:Vector4;
	linear_velocity:Vector4;
	actor_id:uint32;
	angular_yaw:float;
	move_frame:uint32;
	movement_state:uint32;
}

enum ChatMessageType : byte
{
    Zone,
    ZoneGlobal,
    Whisper,
	Channel,
	System,
}

table NamedVariableString
{
    value:string(required);
}

table NamedVariableInt
{
    value:int;
}

table NamedVariableUInt
{
    value:uint;
}

table NamedVariableInt64
{
    value:int64;
}

table NamedVariableUInt64
{
    value:uint64;
}

table NamedVariableFloat
{
    value:float;
}

table NamedVariableDouble
{
    value:double;
}

table NamedVariableBool
{
    value:bool;
}

table NamedVariableGuid
{
    value:Guid;
}

union NamedVariableValue
{
    NamedVariableString, NamedVariableBool,
    NamedVariableFloat, NamedVariableDouble,
    NamedVariableInt, NamedVariableUInt,
    NamedVariableInt64, NamedVariableUInt64,
    NamedVariableGuid
}

table NamedVariable
{
    name:string(required);
    value:NamedVariableValue(required);
}

enum NotificationType : byte
{
        None,				// Not used
		MessageNotify,
		FriendRequest,
		GiftStamina,
}


// ================ Deprecated

enum PlayerRole : byte
{
        None,
        Villager,
        Werewolf,
        Seer,
}

enum GameWinner : byte
{
        None,
        Werewolf,
        Villager,
        WereHamster,
}

enum PlayerKilledReason : byte
{
        Unknown,
        BlockedByBoardGuard,
        ByWerewolf,
        ByHanging,
}

enum RankingType : byte
{
	World
}
