////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : Autogenerated file, Game
//
////////////////////////////////////////////////////////////////////////////////

using System;


namespace SF {
	public partial struct ResultCode {

		// User is already in a game 
		public static readonly Result GAME_ALREADY_IN_GAME =                new Result(unchecked((int)0xE7040000)); 

		// Invalid player 
		public static readonly Result GAME_INVALID_PLAYER =                 new Result(unchecked((int)0xE7040001)); 

		// Game is not ready 
		public static readonly Result GAME_NOTREADY =                       new Result(unchecked((int)0xE7040002)); 

		// Invalid player state to do the action 
		public static readonly Result GAME_INVALID_PLAYER_STATE =           new Result(unchecked((int)0xE7040003)); 

		// Failed to find matching harvest id 
		public static readonly Result GAME_NO_MATCHING_HARVEST_ID =         new Result(unchecked((int)0xE7040004)); 

		// Invalid shop item data 
		public static readonly Result GAME_INVALID_SHOPITEM =               new Result(unchecked((int)0xE7040005)); 

		// Invalid shop item id 
		public static readonly Result GAME_INVALID_SHOPITEMID =             new Result(unchecked((int)0xE7040006)); 

		// User is already in a party 
		public static readonly Result GAME_ALREADY_IN_PARTY =               new Result(unchecked((int)0xE7040007)); 

		// Invalid partyID 
		public static readonly Result GAME_INVALID_PARTYID =                new Result(unchecked((int)0xE7040008)); 

		// Invalid player count for game 
		public static readonly Result GAME_INVALID_PLAYER_COUNT =           new Result(unchecked((int)0xE7040009)); 

		// User doesn't have eligible privilege 
		public static readonly Result GAME_NO_PRIVILEGE =                   new Result(unchecked((int)0xE704000A)); 

		// Not enough money(gold, gem, etc) 
		public static readonly Result GAME_NOTENOUGH_RESOURCE =             new Result(unchecked((int)0xE704000B)); 

		// Maximum notification count 
		public static readonly Result GAME_MAX_NOTIFICATION =               new Result(unchecked((int)0xE704000C)); 

		// Maximum try reached 
		public static readonly Result GAME_MAX_TRY =                        new Result(unchecked((int)0xE704000D)); 

		// User is already in a chatting channel 
		public static readonly Result GAME_ALREADY_IN_CHAT =                new Result(unchecked((int)0xE704000E)); 

		// Map object is invalid 
		public static readonly Result GAME_MAPOBJECT_INVALID =              new Result(unchecked((int)0xE704000F)); 

		// Map object is required to be occupied 
		public static readonly Result GAME_OCCUPIED_MAPOBJECT_IS_REQUIRED = new Result(unchecked((int)0xE7040010)); 

		// Map object is already in use 
		public static readonly Result GAME_MAPOBJECT_ALREADY_IN_USE =       new Result(unchecked((int)0xE7040011)); 

		// Map object is not in use 
		public static readonly Result GAME_MAPOBJECT_NOT_IN_USE =           new Result(unchecked((int)0xE7040012)); 

		// Map object is already in use 
		public static readonly Result GAME_MAPOBJECT_NOT_FOUND =            new Result(unchecked((int)0xE7040013)); 

		// Map object is not occupied by the player 
		public static readonly Result GAME_MAPOBJECT_NOT_OCCUPIED_BY_PLAYER = new Result(unchecked((int)0xE7040014)); 

		// Invalid NPC id 
		public static readonly Result GAME_INVALID_NPCID =                  new Result(unchecked((int)0xE7040015)); 

		// Unexpected table value 
		public static readonly Result GAME_UNEXPECTED_TABLE_VALUE =         new Result(unchecked((int)0xE7040016)); 

		// Not enough currency 
		public static readonly Result GAME_NOT_ENOUGH_CURRENCY =            new Result(unchecked((int)0xE7040017)); 

		// Not enough stamina 
		public static readonly Result GAME_NOT_ENOUGH_STAMINA =             new Result(unchecked((int)0xE7040018)); 

		// The player is busy 
		public static readonly Result GAME_PLAYER_IS_BUSY =                 new Result(unchecked((int)0xE7040019)); 

		// The player is too far away 
		public static readonly Result GAME_PLAYER_TOO_FAR_AWAY =            new Result(unchecked((int)0xE704001A)); 

		// Invalid gold value has been specified 
		public static readonly Result GAME_INVALID_GOLD_VALUE =             new Result(unchecked((int)0xE704001B)); 

		// Invalid player role 
		public static readonly Result GAME_INVALID_ROLE =                   new Result(unchecked((int)0xE704001C)); 

		// Not ready for next game play state 
		public static readonly Result GAME_NOT_READY_FOR_NEXT_STATE =       new Result(unchecked((int)0xE704001D)); 

		// Invalid vote type 
		public static readonly Result GAME_INVALID_VOTETYPE =               new Result(unchecked((int)0xE704001E)); 

		// Invalid vote state 
		public static readonly Result GAME_INVALID_VOTE_STATE =             new Result(unchecked((int)0xE704001F)); 

		// Invalid vote target 
		public static readonly Result GAME_INVALID_VOTE_TARGET =            new Result(unchecked((int)0xE7040020)); 

		// No suffrage 
		public static readonly Result GAME_NO_SUFFRAGE =                    new Result(unchecked((int)0xE7040021)); 

		// Invalid game state 
		public static readonly Result GAME_INVALID_GAMESTATE =              new Result(unchecked((int)0xE7040022)); 

		// Doesn't have enough stamina 
		public static readonly Result GAME_LOW_STAMINA =                    new Result(unchecked((int)0xE7040023)); 

		// Invalid cost table id 
		public static readonly Result GAME_INVALID_COSTID =                 new Result(unchecked((int)0xE7040024)); 

		// Invalid bot talk table 
		public static readonly Result GAME_INVALID_BOTTALK_TABLE =          new Result(unchecked((int)0xE7040025)); 

		// Request has expired 
		public static readonly Result GAME_REQUEST_HAS_EXPIRED =            new Result(unchecked((int)0xE7040026)); 

	}
}



