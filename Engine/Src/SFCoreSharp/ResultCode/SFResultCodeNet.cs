////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : Autogenerated file, Net
//
////////////////////////////////////////////////////////////////////////////////

using System;


namespace SF {
	public partial struct ResultCode {

		// Network sequence already processed 
		public static readonly Result SUCCESS_NET_PROCESSED_SEQUENCE =      new Result(unchecked((int)0x27030000)); 

		// The version not available or miss match with system. 
		public static readonly Result NET_PROTOCOL_VERSION_MISMATCH =       new Result(unchecked((int)0xE7030001)); 

		// Network is not initialized 
		public static readonly Result NET_NOTINITIALIZED =                  new Result(unchecked((int)0xE7030002)); 

		// The version not available or miss match with system. 
		public static readonly Result NET_INVALID_NETCLASS =                new Result(unchecked((int)0xE7030003)); 

		// Not enough space in sliding window 
		public static readonly Result NET_NOT_ENOUGH_WINDOWSPACE =          new Result(unchecked((int)0xE7030004)); 

		// Network IO aborted 
		public static readonly Result NET_IO_ABORTED =                      new Result(unchecked((int)0xE7030005)); 

		// Network IO send failed 
		public static readonly Result NET_IO_SEND_FAIL =                    new Result(unchecked((int)0xE7030006)); 

		// Network IO recv failed 
		public static readonly Result NET_IO_RECV_FAIL =                    new Result(unchecked((int)0xE7030007)); 

		// Network send failed 
		public static readonly Result NET_SEND_FAIL =                       new Result(unchecked((int)0xE7030008)); 

		// Network recv failed 
		public static readonly Result NET_RECV_FAIL =                       new Result(unchecked((int)0xE7030009)); 

		// Network Message sequence is invalid 
		public static readonly Result NET_INVALID_SEQUENCE =                new Result(unchecked((int)0xE703000A)); 

		// Network Message not expected bad packet size 
		public static readonly Result NET_BADPACKET_SIZE =                  new Result(unchecked((int)0xE703000B)); 

		// Network connection closed 
		public static readonly Result NET_CONNECTION_CLOSED =               new Result(unchecked((int)0xE703000C)); 

		// Network connection is never made 
		public static readonly Result NET_NOT_CONNECTED =                   new Result(unchecked((int)0xE703000D)); 

		// Network connection ID is invalid 
		public static readonly Result NET_INVALID_CID =                     new Result(unchecked((int)0xE703000E)); 

		// Network Connection timeout 
		public static readonly Result NET_CONNECTION_TIMEOUT =              new Result(unchecked((int)0xE703000F)); 

		// Network connection is failed 
		public static readonly Result NET_CONNECTION_FAIL =                 new Result(unchecked((int)0xE7030010)); 

		// Too big packet data 
		public static readonly Result NET_BADPACKET_TOOBIG =                new Result(unchecked((int)0xE7030011)); 

		// Network Message not expected bad packet 
		public static readonly Result NET_BADPACKET_NOTEXPECTED =           new Result(unchecked((int)0xE7030012)); 

		// Checksum value of the message is invalid 
		public static readonly Result NET_INVALID_MESSAGE_CHECKSUM =        new Result(unchecked((int)0xE7030013)); 

		// Message encryption is invalid 
		public static readonly Result NET_INVALID_MESSAGE_ENCRYPTION =      new Result(unchecked((int)0xE7030014)); 

		// Invalid connection state 
		public static readonly Result NET_INVALID_CONNECTION_STATE =        new Result(unchecked((int)0xE7030015)); 

		// Too big sequence id 
		public static readonly Result NET_SEQUENCE_OVERFLOW =               new Result(unchecked((int)0xE7030016)); 

		// A blocking operation was interrupted by a call to WSACancelBlockingCall. 
		public static readonly Result NET_INTR =                            new Result(unchecked((int)0xE7030017)); 

		// The file handle supplied is not valid. 
		public static readonly Result NET_BADF =                            new Result(unchecked((int)0xE7030018)); 

		// An attempt was made to access a socket in a way forbidden by its access permissions 
		public static readonly Result NET_ACCES =                           new Result(unchecked((int)0xE7030019)); 

		// The system detected an invalid pointer address in attempting to use a pointer argument in a call. 
		public static readonly Result NET_FAULT =                           new Result(unchecked((int)0xE703001A)); 

		// An invalid argument was supplied. 
		public static readonly Result NET_INVAL =                           new Result(unchecked((int)0xE703001B)); 

		// Too many open sockets. 
		public static readonly Result NET_MFILE =                           new Result(unchecked((int)0xE703001C)); 

		// A non-blocking socket operation could not be completed immediately. 
		public static readonly Result NET_WOULDBLOCK =                      new Result(unchecked((int)0xE703001D)); 

		// A blocking operation is currently executing. 
		public static readonly Result NET_INPROGRESS =                      new Result(unchecked((int)0xE703001E)); 

		// An operation was attempted on a non-blocking socket that already had an operation in progress. 
		public static readonly Result NET_ALREADY =                         new Result(unchecked((int)0xE703001F)); 

		// An operation was attempted on something that is not a socket. 
		public static readonly Result NET_NOTSOCK =                         new Result(unchecked((int)0xE7030020)); 

		// A required address was omitted from an operation on a socket. 
		public static readonly Result NET_DESTADDRREQ =                     new Result(unchecked((int)0xE7030021)); 

		// A socket operation encountered a dead network. 
		public static readonly Result NET_NETDOWN =                         new Result(unchecked((int)0xE7030022)); 

		// A socket operation was attempted to an unreachable network. 
		public static readonly Result NET_NETUNREACH =                      new Result(unchecked((int)0xE7030023)); 

		// The connection has been broken due to keep-alive activity detecting a failure while the operation was in progress. 
		public static readonly Result NET_NETRESET =                        new Result(unchecked((int)0xE7030024)); 

		// An established connection was aborted by the software in your host machine. 
		public static readonly Result NET_CONNABORTED =                     new Result(unchecked((int)0xE7030025)); 

		// An existing connection was forcibly closed by the remote host. 
		public static readonly Result NET_CONNRESET =                       new Result(unchecked((int)0xE7030026)); 

		// An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full. 
		public static readonly Result NET_NOBUFS =                          new Result(unchecked((int)0xE7030027)); 

		// A connect request was made on an already connected socket. 
		public static readonly Result NET_ISCONN =                          new Result(unchecked((int)0xE7030028)); 

		// A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied. 
		public static readonly Result NET_NOTCONN =                         new Result(unchecked((int)0xE7030029)); 

		// A request to send or receive data was disallowed because the socket had already been shut down in that direction with a previous shutdown call. 
		public static readonly Result NET_SHUTDOWN =                        new Result(unchecked((int)0xE703002A)); 

		// Too many references to some kernel object. 
		public static readonly Result NET_TOOMANYREFS =                     new Result(unchecked((int)0xE703002B)); 

		// A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. 
		public static readonly Result NET_TIMEDOUT =                        new Result(unchecked((int)0xE703002C)); 

		// No connection could be made because the target machine actively refused it. 
		public static readonly Result NET_CONNECTION_REFUSSED =             new Result(unchecked((int)0xE703002D)); 

		// Cannot translate name. 
		public static readonly Result NET_LOOP =                            new Result(unchecked((int)0xE703002E)); 

		// Name component or name was too long. 
		public static readonly Result NET_NAMETOOLONG =                     new Result(unchecked((int)0xE703002F)); 

		// A socket operation failed because the destination host was down. 
		public static readonly Result NET_HOSTDOWN =                        new Result(unchecked((int)0xE7030030)); 

		// A socket operation was attempted to an unreachable host. 
		public static readonly Result NET_HOSTUNREACH =                     new Result(unchecked((int)0xE7030031)); 

		// Cannot remove a directory that is not empty. 
		public static readonly Result NET_NOTEMPTY =                        new Result(unchecked((int)0xE7030032)); 

		// A Windows Sockets implementation may have a limit on the number of applications that may use it simultaneously. 
		public static readonly Result NET_PROCLIM =                         new Result(unchecked((int)0xE7030033)); 

		// WSAStartup cannot function at this time because the underlying system it uses to provide network services is currently unavailable. 
		public static readonly Result NET_SYSNOTREADY =                     new Result(unchecked((int)0xE7030034)); 

		// The Windows Sockets version requested is not supported. 
		public static readonly Result NET_VERNOTSUPPORTED =                 new Result(unchecked((int)0xE7030035)); 

		// Either the application has not called WSAStartup, or WSAStartup failed. 
		public static readonly Result NET_NOTINITIALISED =                  new Result(unchecked((int)0xE7030036)); 

		// Returned by WSARecv or WSARecvFrom to indicate the remote party has initiated a graceful shutdown sequence. 
		public static readonly Result NET_DISCON =                          new Result(unchecked((int)0xE7030037)); 

		// A system call has failed. 
		public static readonly Result NET_SYSCALLFAILURE =                  new Result(unchecked((int)0xE7030038)); 

		// Host not found. 
		public static readonly Result NET_HOST_NOT_FOUND =                  new Result(unchecked((int)0xE7030039)); 

		// Try again 
		public static readonly Result NET_TRY_AGAIN =                       new Result(unchecked((int)0xE703003A)); 

		// IOPending 
		public static readonly Result NET_IO_PENDING =                      new Result(unchecked((int)0xE703003B)); 

		// No such host is known securely. 
		public static readonly Result NET_SECURE_HOST_NOT_FOUND =           new Result(unchecked((int)0xE703003C)); 

		// Protocol error 
		public static readonly Result NET_PROTO =                           new Result(unchecked((int)0xE703003D)); 

		// Protocol wrong type for socket. 
		public static readonly Result NET_PROTOTYPE =                       new Result(unchecked((int)0xE703003E)); 

		// Protocol not available 
		public static readonly Result NET_NOPROTOOPT =                      new Result(unchecked((int)0xE703003F)); 

		// Machine is not on the network 
		public static readonly Result NET_NONET =                           new Result(unchecked((int)0xE7030040)); 

		// Operation not supported on socket 
		public static readonly Result NET_OPNOTSUPP =                       new Result(unchecked((int)0xE7030041)); 

		// An invalid value was provided for the ai_flags member of the pHints parameter. 
		public static readonly Result NET_BADFLAGS =                        new Result(unchecked((int)0xE7030042)); 

		// Bad network family 
		public static readonly Result NET_FAMILY =                          new Result(unchecked((int)0xE7030043)); 

		// The pServiceName parameter is not supported for the specified ai_socktype member of the pHints parameter. 
		public static readonly Result NET_INVALID_SERVICE =                 new Result(unchecked((int)0xE7030044)); 

		// Invalid network address 
		public static readonly Result NET_INVALID_ADDRESS =                 new Result(unchecked((int)0xE7030045)); 

		// Address in use 
		public static readonly Result NET_ADDRINUSE =                       new Result(unchecked((int)0xE7030046)); 

		// Network Message not expected packet data 
		public static readonly Result NET_BADPACKET =                       new Result(unchecked((int)0xE7030047)); 

		// Disconnected 
		public static readonly Result NET_DISCONNECTED =                    new Result(unchecked((int)0xE7030048)); 

	}
}



