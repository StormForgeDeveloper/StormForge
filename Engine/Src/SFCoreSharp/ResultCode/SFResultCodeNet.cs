////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) 2016 Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : Autogenerated file, Net
//
////////////////////////////////////////////////////////////////////////////////

using System;


namespace SF {
	public partial struct ResultCode {

		// Network sequence already processed 
		public const int SUCCESS_NET_PROCESSED_SEQUENCE =                   unchecked((int)0x27030000); 

		// The version not available or miss match with system. 
		public const int NET_PROTOCOL_VERSION_MISMATCH =                    unchecked((int)0xE7030001); 

		// Network is not initialized 
		public const int NET_NOTINITIALIZED =                               unchecked((int)0xE7030002); 

		// The version not available or miss match with system. 
		public const int NET_INVALID_NETCLASS =                             unchecked((int)0xE7030003); 

		// Not enough space in sliding window 
		public const int NET_NOT_ENOUGH_WINDOWSPACE =                       unchecked((int)0xE7030004); 

		// Network IO aborted 
		public const int NET_IO_ABORTED =                                   unchecked((int)0xE7030005); 

		// Network IO send failed 
		public const int NET_IO_SEND_FAIL =                                 unchecked((int)0xE7030006); 

		// Network IO recv failed 
		public const int NET_IO_RECV_FAIL =                                 unchecked((int)0xE7030007); 

		// Network send failed 
		public const int NET_SEND_FAIL =                                    unchecked((int)0xE7030008); 

		// Network recv failed 
		public const int NET_RECV_FAIL =                                    unchecked((int)0xE7030009); 

		// Network Message sequence is invalid 
		public const int NET_INVALID_SEQUENCE =                             unchecked((int)0xE703000A); 

		// Network Message not expected bad packet size 
		public const int NET_BADPACKET_SIZE =                               unchecked((int)0xE703000B); 

		// Network connection closed 
		public const int NET_CONNECTION_CLOSED =                            unchecked((int)0xE703000C); 

		// Network connection is never made 
		public const int NET_NOT_CONNECTED =                                unchecked((int)0xE703000D); 

		// Network connection ID is invalid 
		public const int NET_INVALID_CID =                                  unchecked((int)0xE703000E); 

		// Network Connection timeout 
		public const int NET_CONNECTION_TIMEOUT =                           unchecked((int)0xE703000F); 

		// Network connection is failed 
		public const int NET_CONNECTION_FAIL =                              unchecked((int)0xE7030010); 

		// Too big packet data 
		public const int NET_BADPACKET_TOOBIG =                             unchecked((int)0xE7030011); 

		// Network Message not expected bad packet 
		public const int NET_BADPACKET_NOTEXPECTED =                        unchecked((int)0xE7030012); 

		// Checksum value of the message is invalid 
		public const int NET_INVALID_MESSAGE_CHECKSUM =                     unchecked((int)0xE7030013); 

		// Message encryption is invalid 
		public const int NET_INVALID_MESSAGE_ENCRYPTION =                   unchecked((int)0xE7030014); 

		// Invalid connection state 
		public const int NET_INVALID_CONNECTION_STATE =                     unchecked((int)0xE7030015); 

		// Too big sequence id 
		public const int NET_SEQUENCE_OVERFLOW =                            unchecked((int)0xE7030016); 

		// A blocking operation was interrupted by a call to WSACancelBlockingCall. 
		public const int NET_INTR =                                         unchecked((int)0xE7030017); 

		// The file handle supplied is not valid. 
		public const int NET_BADF =                                         unchecked((int)0xE7030018); 

		// An attempt was made to access a socket in a way forbidden by its access permissions 
		public const int NET_ACCES =                                        unchecked((int)0xE7030019); 

		// The system detected an invalid pointer address in attempting to use a pointer argument in a call. 
		public const int NET_FAULT =                                        unchecked((int)0xE703001A); 

		// An invalid argument was supplied. 
		public const int NET_INVAL =                                        unchecked((int)0xE703001B); 

		// Too many open sockets. 
		public const int NET_MFILE =                                        unchecked((int)0xE703001C); 

		// A non-blocking socket operation could not be completed immediately. 
		public const int NET_WOULDBLOCK =                                   unchecked((int)0xE703001D); 

		// A blocking operation is currently executing. 
		public const int NET_INPROGRESS =                                   unchecked((int)0xE703001E); 

		// An operation was attempted on a non-blocking socket that already had an operation in progress. 
		public const int NET_ALREADY =                                      unchecked((int)0xE703001F); 

		// An operation was attempted on something that is not a socket. 
		public const int NET_NOTSOCK =                                      unchecked((int)0xE7030020); 

		// A required address was omitted from an operation on a socket. 
		public const int NET_DESTADDRREQ =                                  unchecked((int)0xE7030021); 

		// A socket operation encountered a dead network. 
		public const int NET_NETDOWN =                                      unchecked((int)0xE7030022); 

		// A socket operation was attempted to an unreachable network. 
		public const int NET_NETUNREACH =                                   unchecked((int)0xE7030023); 

		// The connection has been broken due to keep-alive activity detecting a failure while the operation was in progress. 
		public const int NET_NETRESET =                                     unchecked((int)0xE7030024); 

		// An established connection was aborted by the software in your host machine. 
		public const int NET_CONNABORTED =                                  unchecked((int)0xE7030025); 

		// An existing connection was forcibly closed by the remote host. 
		public const int NET_CONNRESET =                                    unchecked((int)0xE7030026); 

		// An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full. 
		public const int NET_NOBUFS =                                       unchecked((int)0xE7030027); 

		// A connect request was made on an already connected socket. 
		public const int NET_ISCONN =                                       unchecked((int)0xE7030028); 

		// A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied. 
		public const int NET_NOTCONN =                                      unchecked((int)0xE7030029); 

		// A request to send or receive data was disallowed because the socket had already been shut down in that direction with a previous shutdown call. 
		public const int NET_SHUTDOWN =                                     unchecked((int)0xE703002A); 

		// Too many references to some kernel object. 
		public const int NET_TOOMANYREFS =                                  unchecked((int)0xE703002B); 

		// A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. 
		public const int NET_TIMEDOUT =                                     unchecked((int)0xE703002C); 

		// No connection could be made because the target machine actively refused it. 
		public const int NET_CONNECTION_REFUSSED =                          unchecked((int)0xE703002D); 

		// Cannot translate name. 
		public const int NET_LOOP =                                         unchecked((int)0xE703002E); 

		// Name component or name was too long. 
		public const int NET_NAMETOOLONG =                                  unchecked((int)0xE703002F); 

		// A socket operation failed because the destination host was down. 
		public const int NET_HOSTDOWN =                                     unchecked((int)0xE7030030); 

		// A socket operation was attempted to an unreachable host. 
		public const int NET_HOSTUNREACH =                                  unchecked((int)0xE7030031); 

		// Cannot remove a directory that is not empty. 
		public const int NET_NOTEMPTY =                                     unchecked((int)0xE7030032); 

		// A Windows Sockets implementation may have a limit on the number of applications that may use it simultaneously. 
		public const int NET_PROCLIM =                                      unchecked((int)0xE7030033); 

		// WSAStartup cannot function at this time because the underlying system it uses to provide network services is currently unavailable. 
		public const int NET_SYSNOTREADY =                                  unchecked((int)0xE7030034); 

		// The Windows Sockets version requested is not supported. 
		public const int NET_VERNOTSUPPORTED =                              unchecked((int)0xE7030035); 

		// Either the application has not called WSAStartup, or WSAStartup failed. 
		public const int NET_NOTINITIALISED =                               unchecked((int)0xE7030036); 

		// Returned by WSARecv or WSARecvFrom to indicate the remote party has initiated a graceful shutdown sequence. 
		public const int NET_DISCON =                                       unchecked((int)0xE7030037); 

		// A system call has failed. 
		public const int NET_SYSCALLFAILURE =                               unchecked((int)0xE7030038); 

		// Host not found. 
		public const int NET_HOST_NOT_FOUND =                               unchecked((int)0xE7030039); 

		// Try again 
		public const int NET_TRY_AGAIN =                                    unchecked((int)0xE703003A); 

		// IOPending 
		public const int NET_IO_PENDING =                                   unchecked((int)0xE703003B); 

		// No such host is known securely. 
		public const int NET_SECURE_HOST_NOT_FOUND =                        unchecked((int)0xE703003C); 

		// Protocol error 
		public const int NET_PROTO =                                        unchecked((int)0xE703003D); 

		// Protocol wrong type for socket. 
		public const int NET_PROTOTYPE =                                    unchecked((int)0xE703003E); 

		// Protocol not available 
		public const int NET_NOPROTOOPT =                                   unchecked((int)0xE703003F); 

		// Machine is not on the network 
		public const int NET_NONET =                                        unchecked((int)0xE7030040); 

		// Operation not supported on socket 
		public const int NET_OPNOTSUPP =                                    unchecked((int)0xE7030041); 

		// An invalid value was provided for the ai_flags member of the pHints parameter. 
		public const int NET_BADFLAGS =                                     unchecked((int)0xE7030042); 

		// Bad network family 
		public const int NET_FAMILY =                                       unchecked((int)0xE7030043); 

		// The pServiceName parameter is not supported for the specified ai_socktype member of the pHints parameter. 
		public const int NET_INVALID_SERVICE =                              unchecked((int)0xE7030044); 

		// Invalid network address 
		public const int NET_INVALID_ADDRESS =                              unchecked((int)0xE7030045); 

		// Address in use 
		public const int NET_ADDRINUSE =                                    unchecked((int)0xE7030046); 

		// Network Message not expected packet data 
		public const int NET_BADPACKET =                                    unchecked((int)0xE7030047); 

		// Disconnected 
		public const int NET_DISCONNECTED =                                 unchecked((int)0xE7030048); 

	}
}



