// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UGCContentInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static UGCContentInfo GetRootAsUGCContentInfo(ByteBuffer _bb) { return GetRootAsUGCContentInfo(_bb, new UGCContentInfo()); }
  public static UGCContentInfo GetRootAsUGCContentInfo(ByteBuffer _bb, UGCContentInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UGCContentInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SF.Flat.Guid? UgcContentId { get { int o = __p.__offset(4); return o != 0 ? (SF.Flat.Guid?)(new SF.Flat.Guid()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public ulong DataId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string Category { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCategoryBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCategoryArray() { return __p.__vector_as_array<byte>(8); }
  public string DataPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDataPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDataPathArray() { return __p.__vector_as_array<byte>(10); }

  public static void StartUGCContentInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUgcContentId(FlatBufferBuilder builder, Offset<SF.Flat.Guid> ugcContentIdOffset) { builder.AddStruct(0, ugcContentIdOffset.Value, 0); }
  public static void AddDataId(FlatBufferBuilder builder, ulong dataId) { builder.AddUlong(1, dataId, 0); }
  public static void AddCategory(FlatBufferBuilder builder, StringOffset categoryOffset) { builder.AddOffset(2, categoryOffset.Value, 0); }
  public static void AddDataPath(FlatBufferBuilder builder, StringOffset dataPathOffset) { builder.AddOffset(3, dataPathOffset.Value, 0); }
  public static Offset<SF.Flat.UGCContentInfo> EndUGCContentInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.UGCContentInfo>(o);
  }
}


static public class UGCContentInfoVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UgcContentId*/, 16 /*SF.Flat.Guid*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DataId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*Category*/, false)
      && verifier.VerifyString(tablePos, 10 /*DataPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
