// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActorMovement : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ActorMovement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SF.Flat.Vector4 Position { get { return (new SF.Flat.Vector4()).__assign(__p.bb_pos + 0, __p.bb); } }
  public SF.Flat.Vector4 LinearVelocity { get { return (new SF.Flat.Vector4()).__assign(__p.bb_pos + 16, __p.bb); } }
  public uint ActorId { get { return __p.bb.GetUint(__p.bb_pos + 32); } }
  public float AngularYaw { get { return __p.bb.GetFloat(__p.bb_pos + 36); } }
  public uint MoveFrame { get { return __p.bb.GetUint(__p.bb_pos + 40); } }
  public uint MovementState { get { return __p.bb.GetUint(__p.bb_pos + 44); } }

  public static Offset<SF.Flat.ActorMovement> CreateActorMovement(FlatBufferBuilder builder, float position_X, float position_Y, float position_Z, float position_W, float linear_velocity_X, float linear_velocity_Y, float linear_velocity_Z, float linear_velocity_W, uint ActorId, float AngularYaw, uint MoveFrame, uint MovementState) {
    builder.Prep(4, 48);
    builder.PutUint(MovementState);
    builder.PutUint(MoveFrame);
    builder.PutFloat(AngularYaw);
    builder.PutUint(ActorId);
    builder.Prep(4, 16);
    builder.PutFloat(linear_velocity_W);
    builder.PutFloat(linear_velocity_Z);
    builder.PutFloat(linear_velocity_Y);
    builder.PutFloat(linear_velocity_X);
    builder.Prep(4, 16);
    builder.PutFloat(position_W);
    builder.PutFloat(position_Z);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    return new Offset<SF.Flat.ActorMovement>(builder.Offset);
  }
}


}
