// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActorMovement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static ActorMovement GetRootAsActorMovement(ByteBuffer _bb) { return GetRootAsActorMovement(_bb, new ActorMovement()); }
  public static ActorMovement GetRootAsActorMovement(ByteBuffer _bb, ActorMovement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActorMovement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SF.Flat.Vector4? Position { get { int o = __p.__offset(4); return o != 0 ? (SF.Flat.Vector4?)(new SF.Flat.Vector4()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public SF.Flat.Vector4? LinearVelocity { get { int o = __p.__offset(6); return o != 0 ? (SF.Flat.Vector4?)(new SF.Flat.Vector4()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public uint ActorId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public float AngularYaw { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint MoveFrame { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint MovementState { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static void StartActorMovement(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<SF.Flat.Vector4> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddLinearVelocity(FlatBufferBuilder builder, Offset<SF.Flat.Vector4> linearVelocityOffset) { builder.AddStruct(1, linearVelocityOffset.Value, 0); }
  public static void AddActorId(FlatBufferBuilder builder, uint actorId) { builder.AddUint(2, actorId, 0); }
  public static void AddAngularYaw(FlatBufferBuilder builder, float angularYaw) { builder.AddFloat(3, angularYaw, 0.0f); }
  public static void AddMoveFrame(FlatBufferBuilder builder, uint moveFrame) { builder.AddUint(4, moveFrame, 0); }
  public static void AddMovementState(FlatBufferBuilder builder, uint movementState) { builder.AddUint(5, movementState, 0); }
  public static Offset<SF.Flat.ActorMovement> EndActorMovement(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.ActorMovement>(o);
  }
}


static public class ActorMovementVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Position*/, 16 /*SF.Flat.Vector4*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*LinearVelocity*/, 16 /*SF.Flat.Vector4*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ActorId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*AngularYaw*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MoveFrame*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MovementState*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
