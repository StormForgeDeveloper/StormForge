// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct NamedVariable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static NamedVariable GetRootAsNamedVariable(ByteBuffer _bb) { return GetRootAsNamedVariable(_bb, new NamedVariable()); }
  public static NamedVariable GetRootAsNamedVariable(ByteBuffer _bb, NamedVariable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NamedVariable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public SF.Flat.NamedVariableValue ValueType { get { int o = __p.__offset(6); return o != 0 ? (SF.Flat.NamedVariableValue)__p.bb.Get(o + __p.bb_pos) : SF.Flat.NamedVariableValue.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public SF.Flat.NamedVariableString ValueAsNamedVariableString() { return Value<SF.Flat.NamedVariableString>().Value; }
  public SF.Flat.NamedVariableBool ValueAsNamedVariableBool() { return Value<SF.Flat.NamedVariableBool>().Value; }
  public SF.Flat.NamedVariableFloat ValueAsNamedVariableFloat() { return Value<SF.Flat.NamedVariableFloat>().Value; }
  public SF.Flat.NamedVariableDouble ValueAsNamedVariableDouble() { return Value<SF.Flat.NamedVariableDouble>().Value; }
  public SF.Flat.NamedVariableInt ValueAsNamedVariableInt() { return Value<SF.Flat.NamedVariableInt>().Value; }
  public SF.Flat.NamedVariableUInt ValueAsNamedVariableUInt() { return Value<SF.Flat.NamedVariableUInt>().Value; }
  public SF.Flat.NamedVariableInt64 ValueAsNamedVariableInt64() { return Value<SF.Flat.NamedVariableInt64>().Value; }
  public SF.Flat.NamedVariableUInt64 ValueAsNamedVariableUInt64() { return Value<SF.Flat.NamedVariableUInt64>().Value; }
  public SF.Flat.NamedVariableGuid ValueAsNamedVariableGuid() { return Value<SF.Flat.NamedVariableGuid>().Value; }

  public static Offset<SF.Flat.NamedVariable> CreateNamedVariable(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      SF.Flat.NamedVariableValue value_type = SF.Flat.NamedVariableValue.NONE,
      int valueOffset = 0) {
    builder.StartTable(3);
    NamedVariable.AddValue(builder, valueOffset);
    NamedVariable.AddName(builder, nameOffset);
    NamedVariable.AddValueType(builder, value_type);
    return NamedVariable.EndNamedVariable(builder);
  }

  public static void StartNamedVariable(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, SF.Flat.NamedVariableValue valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static Offset<SF.Flat.NamedVariable> EndNamedVariable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // name
    builder.Required(o, 8);  // value
    return new Offset<SF.Flat.NamedVariable>(o);
  }
}


static public class NamedVariableVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, true)
      && verifier.VerifyField(tablePos, 6 /*ValueType*/, 1 /*SF.Flat.NamedVariableValue*/, 1, false)
      && verifier.VerifyUnion(tablePos, 6, 8 /*Value*/, SF.Flat.NamedVariableValueVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
