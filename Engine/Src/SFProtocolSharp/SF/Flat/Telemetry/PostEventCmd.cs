// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Telemetry
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PostEventCmd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static PostEventCmd GetRootAsPostEventCmd(ByteBuffer _bb) { return GetRootAsPostEventCmd(_bb, new PostEventCmd()); }
  public static PostEventCmd GetRootAsPostEventCmd(ByteBuffer _bb, PostEventCmd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PostEventCmd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEventNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEventNameArray() { return __p.__vector_as_array<byte>(4); }
  public ulong TimeStamp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string AppId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAppIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAppIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAppIdArray() { return __p.__vector_as_array<byte>(8); }
  public string MachineId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMachineIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMachineIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMachineIdArray() { return __p.__vector_as_array<byte>(10); }
  public uint EventId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong AccountId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool IsPlayEvent { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public byte SessionId(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int SessionIdLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSessionIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetSessionIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetSessionIdArray() { return __p.__vector_as_array<byte>(18); }
  public SF.Flat.NamedVariable? Attributes(int j) { int o = __p.__offset(20); return o != 0 ? (SF.Flat.NamedVariable?)(new SF.Flat.NamedVariable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttributesLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SF.Flat.Telemetry.PostEventCmd> CreatePostEventCmd(FlatBufferBuilder builder,
      StringOffset event_nameOffset = default(StringOffset),
      ulong time_stamp = 0,
      StringOffset app_idOffset = default(StringOffset),
      StringOffset machine_idOffset = default(StringOffset),
      uint event_id = 0,
      ulong account_id = 0,
      bool is_play_event = false,
      VectorOffset session_idOffset = default(VectorOffset),
      VectorOffset attributesOffset = default(VectorOffset)) {
    builder.StartTable(9);
    PostEventCmd.AddAccountId(builder, account_id);
    PostEventCmd.AddTimeStamp(builder, time_stamp);
    PostEventCmd.AddAttributes(builder, attributesOffset);
    PostEventCmd.AddSessionId(builder, session_idOffset);
    PostEventCmd.AddEventId(builder, event_id);
    PostEventCmd.AddMachineId(builder, machine_idOffset);
    PostEventCmd.AddAppId(builder, app_idOffset);
    PostEventCmd.AddEventName(builder, event_nameOffset);
    PostEventCmd.AddIsPlayEvent(builder, is_play_event);
    return PostEventCmd.EndPostEventCmd(builder);
  }

  public static void StartPostEventCmd(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddEventName(FlatBufferBuilder builder, StringOffset eventNameOffset) { builder.AddOffset(0, eventNameOffset.Value, 0); }
  public static void AddTimeStamp(FlatBufferBuilder builder, ulong timeStamp) { builder.AddUlong(1, timeStamp, 0); }
  public static void AddAppId(FlatBufferBuilder builder, StringOffset appIdOffset) { builder.AddOffset(2, appIdOffset.Value, 0); }
  public static void AddMachineId(FlatBufferBuilder builder, StringOffset machineIdOffset) { builder.AddOffset(3, machineIdOffset.Value, 0); }
  public static void AddEventId(FlatBufferBuilder builder, uint eventId) { builder.AddUint(4, eventId, 0); }
  public static void AddAccountId(FlatBufferBuilder builder, ulong accountId) { builder.AddUlong(5, accountId, 0); }
  public static void AddIsPlayEvent(FlatBufferBuilder builder, bool isPlayEvent) { builder.AddBool(6, isPlayEvent, false); }
  public static void AddSessionId(FlatBufferBuilder builder, VectorOffset sessionIdOffset) { builder.AddOffset(7, sessionIdOffset.Value, 0); }
  public static VectorOffset CreateSessionIdVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSessionIdVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSessionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddAttributes(FlatBufferBuilder builder, VectorOffset attributesOffset) { builder.AddOffset(8, attributesOffset.Value, 0); }
  public static VectorOffset CreateAttributesVector(FlatBufferBuilder builder, Offset<SF.Flat.NamedVariable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, Offset<SF.Flat.NamedVariable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<SF.Flat.NamedVariable>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<SF.Flat.NamedVariable>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttributesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SF.Flat.Telemetry.PostEventCmd> EndPostEventCmd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Telemetry.PostEventCmd>(o);
  }
}


static public class PostEventCmdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*EventName*/, false)
      && verifier.VerifyField(tablePos, 6 /*TimeStamp*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*AppId*/, false)
      && verifier.VerifyString(tablePos, 10 /*MachineId*/, false)
      && verifier.VerifyField(tablePos, 12 /*EventId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*AccountId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*IsPlayEvent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*SessionId*/, 1 /*byte*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 20 /*Attributes*/, SF.Flat.NamedVariableVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
