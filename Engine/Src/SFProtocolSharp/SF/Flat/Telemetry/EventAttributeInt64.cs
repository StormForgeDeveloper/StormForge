// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Telemetry
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventAttributeInt64 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static EventAttributeInt64 GetRootAsEventAttributeInt64(ByteBuffer _bb) { return GetRootAsEventAttributeInt64(_bb, new EventAttributeInt64()); }
  public static EventAttributeInt64 GetRootAsEventAttributeInt64(ByteBuffer _bb, EventAttributeInt64 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventAttributeInt64 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<SF.Flat.Telemetry.EventAttributeInt64> CreateEventAttributeInt64(FlatBufferBuilder builder,
      long value = 0) {
    builder.StartTable(1);
    EventAttributeInt64.AddValue(builder, value);
    return EventAttributeInt64.EndEventAttributeInt64(builder);
  }

  public static void StartEventAttributeInt64(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, long value) { builder.AddLong(0, value, 0); }
  public static Offset<SF.Flat.Telemetry.EventAttributeInt64> EndEventAttributeInt64(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Telemetry.EventAttributeInt64>(o);
  }
}


static public class EventAttributeInt64Verify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Value*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
