// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Telemetry
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventAttribute : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static EventAttribute GetRootAsEventAttribute(ByteBuffer _bb) { return GetRootAsEventAttribute(_bb, new EventAttribute()); }
  public static EventAttribute GetRootAsEventAttribute(ByteBuffer _bb, EventAttribute obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventAttribute __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public SF.Flat.Telemetry.EventAttributeValue ValueType { get { int o = __p.__offset(6); return o != 0 ? (SF.Flat.Telemetry.EventAttributeValue)__p.bb.Get(o + __p.bb_pos) : SF.Flat.Telemetry.EventAttributeValue.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public SF.Flat.Telemetry.EventAttributeString ValueAsEventAttributeString() { return Value<SF.Flat.Telemetry.EventAttributeString>().Value; }
  public SF.Flat.Telemetry.EventAttributeBool ValueAsEventAttributeBool() { return Value<SF.Flat.Telemetry.EventAttributeBool>().Value; }
  public SF.Flat.Telemetry.EventAttributeFloat ValueAsEventAttributeFloat() { return Value<SF.Flat.Telemetry.EventAttributeFloat>().Value; }
  public SF.Flat.Telemetry.EventAttributeDouble ValueAsEventAttributeDouble() { return Value<SF.Flat.Telemetry.EventAttributeDouble>().Value; }
  public SF.Flat.Telemetry.EventAttributeInt ValueAsEventAttributeInt() { return Value<SF.Flat.Telemetry.EventAttributeInt>().Value; }
  public SF.Flat.Telemetry.EventAttributeUInt ValueAsEventAttributeUInt() { return Value<SF.Flat.Telemetry.EventAttributeUInt>().Value; }
  public SF.Flat.Telemetry.EventAttributeInt64 ValueAsEventAttributeInt64() { return Value<SF.Flat.Telemetry.EventAttributeInt64>().Value; }
  public SF.Flat.Telemetry.EventAttributeUInt64 ValueAsEventAttributeUInt64() { return Value<SF.Flat.Telemetry.EventAttributeUInt64>().Value; }

  public static Offset<SF.Flat.Telemetry.EventAttribute> CreateEventAttribute(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      SF.Flat.Telemetry.EventAttributeValue value_type = SF.Flat.Telemetry.EventAttributeValue.NONE,
      int valueOffset = 0) {
    builder.StartTable(3);
    EventAttribute.AddValue(builder, valueOffset);
    EventAttribute.AddName(builder, nameOffset);
    EventAttribute.AddValueType(builder, value_type);
    return EventAttribute.EndEventAttribute(builder);
  }

  public static void StartEventAttribute(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, SF.Flat.Telemetry.EventAttributeValue valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static Offset<SF.Flat.Telemetry.EventAttribute> EndEventAttribute(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // name
    builder.Required(o, 8);  // value
    return new Offset<SF.Flat.Telemetry.EventAttribute>(o);
  }
}


static public class EventAttributeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, true)
      && verifier.VerifyField(tablePos, 6 /*ValueType*/, 1 /*SF.Flat.Telemetry.EventAttributeValue*/, 1, false)
      && verifier.VerifyUnion(tablePos, 6, 8 /*Value*/, SF.Flat.Telemetry.EventAttributeValueVerify.Verify, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
