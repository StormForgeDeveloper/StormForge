// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.PlayInstance
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct JoinPlayInstanceCmd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static JoinPlayInstanceCmd GetRootAsJoinPlayInstanceCmd(ByteBuffer _bb) { return GetRootAsJoinPlayInstanceCmd(_bb, new JoinPlayInstanceCmd()); }
  public static JoinPlayInstanceCmd GetRootAsJoinPlayInstanceCmd(ByteBuffer _bb, JoinPlayInstanceCmd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JoinPlayInstanceCmd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong PlayInstanceUid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong PlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string PlayerIdentifier { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdentifierBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdentifierBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPlayerIdentifierArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<SF.Flat.PlayInstance.JoinPlayInstanceCmd> CreateJoinPlayInstanceCmd(FlatBufferBuilder builder,
      ulong play_instance_uid = 0,
      ulong player_id = 0,
      StringOffset player_identifierOffset = default(StringOffset)) {
    builder.StartTable(3);
    JoinPlayInstanceCmd.AddPlayerId(builder, player_id);
    JoinPlayInstanceCmd.AddPlayInstanceUid(builder, play_instance_uid);
    JoinPlayInstanceCmd.AddPlayerIdentifier(builder, player_identifierOffset);
    return JoinPlayInstanceCmd.EndJoinPlayInstanceCmd(builder);
  }

  public static void StartJoinPlayInstanceCmd(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPlayInstanceUid(FlatBufferBuilder builder, ulong playInstanceUid) { builder.AddUlong(0, playInstanceUid, 0); }
  public static void AddPlayerId(FlatBufferBuilder builder, ulong playerId) { builder.AddUlong(1, playerId, 0); }
  public static void AddPlayerIdentifier(FlatBufferBuilder builder, StringOffset playerIdentifierOffset) { builder.AddOffset(2, playerIdentifierOffset.Value, 0); }
  public static Offset<SF.Flat.PlayInstance.JoinPlayInstanceCmd> EndJoinPlayInstanceCmd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.PlayInstance.JoinPlayInstanceCmd>(o);
  }
}


static public class JoinPlayInstanceCmdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayInstanceUid*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*PlayerId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*PlayerIdentifier*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
