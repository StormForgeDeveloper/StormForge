// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GetAchievementStatsRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static GetAchievementStatsRes GetRootAsGetAchievementStatsRes(ByteBuffer _bb) { return GetRootAsGetAchievementStatsRes(_bb, new GetAchievementStatsRes()); }
  public static GetAchievementStatsRes GetRootAsGetAchievementStatsRes(ByteBuffer _bb, GetAchievementStatsRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GetAchievementStatsRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SF.Flat.AchievementStat? AchievementStats(int j) { int o = __p.__offset(4); return o != 0 ? (SF.Flat.AchievementStat?)(new SF.Flat.AchievementStat()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int AchievementStatsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SF.Flat.Game.GetAchievementStatsRes> CreateGetAchievementStatsRes(FlatBufferBuilder builder,
      VectorOffset achievement_statsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    GetAchievementStatsRes.AddAchievementStats(builder, achievement_statsOffset);
    return GetAchievementStatsRes.EndGetAchievementStatsRes(builder);
  }

  public static void StartGetAchievementStatsRes(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAchievementStats(FlatBufferBuilder builder, VectorOffset achievementStatsOffset) { builder.AddOffset(0, achievementStatsOffset.Value, 0); }
  public static void StartAchievementStatsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<SF.Flat.Game.GetAchievementStatsRes> EndGetAchievementStatsRes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Game.GetAchievementStatsRes>(o);
  }
}


static public class GetAchievementStatsResVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*AchievementStats*/, 8 /*SF.Flat.AchievementStat*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
