// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameMatchedS2CEvt : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static GameMatchedS2CEvt GetRootAsGameMatchedS2CEvt(ByteBuffer _bb) { return GetRootAsGameMatchedS2CEvt(_bb, new GameMatchedS2CEvt()); }
  public static GameMatchedS2CEvt GetRootAsGameMatchedS2CEvt(ByteBuffer _bb, GameMatchedS2CEvt obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameMatchedS2CEvt __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong InsUid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint TimeStamp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public SF.Flat.GameStateID GameState { get { int o = __p.__offset(8); return o != 0 ? (SF.Flat.GameStateID)__p.bb.GetSbyte(o + __p.bb_pos) : SF.Flat.GameStateID.None; } }
  public byte Day { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte MaxPlayer { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte PlayerIndex { get { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte PlayerCharacter { get { int o = __p.__offset(16); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Role { get { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Dead { get { int o = __p.__offset(20); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte ChatHistoryData(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ChatHistoryDataLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChatHistoryDataBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetChatHistoryDataBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetChatHistoryDataArray() { return __p.__vector_as_array<byte>(22); }
  public byte GameLogData(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int GameLogDataLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameLogDataBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetGameLogDataBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetGameLogDataArray() { return __p.__vector_as_array<byte>(24); }
  public uint Stamina { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong TotalGem { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong TotalGameMoney { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<SF.Flat.Game.GameMatchedS2CEvt> CreateGameMatchedS2CEvt(FlatBufferBuilder builder,
      ulong ins_uid = 0,
      uint time_stamp = 0,
      SF.Flat.GameStateID game_state = SF.Flat.GameStateID.None,
      byte day = 0,
      byte max_player = 0,
      byte player_index = 0,
      byte player_character = 0,
      byte role = 0,
      byte dead = 0,
      VectorOffset chat_history_dataOffset = default(VectorOffset),
      VectorOffset game_log_dataOffset = default(VectorOffset),
      uint stamina = 0,
      ulong total_gem = 0,
      ulong total_game_money = 0) {
    builder.StartTable(14);
    GameMatchedS2CEvt.AddTotalGameMoney(builder, total_game_money);
    GameMatchedS2CEvt.AddTotalGem(builder, total_gem);
    GameMatchedS2CEvt.AddInsUid(builder, ins_uid);
    GameMatchedS2CEvt.AddStamina(builder, stamina);
    GameMatchedS2CEvt.AddGameLogData(builder, game_log_dataOffset);
    GameMatchedS2CEvt.AddChatHistoryData(builder, chat_history_dataOffset);
    GameMatchedS2CEvt.AddTimeStamp(builder, time_stamp);
    GameMatchedS2CEvt.AddDead(builder, dead);
    GameMatchedS2CEvt.AddRole(builder, role);
    GameMatchedS2CEvt.AddPlayerCharacter(builder, player_character);
    GameMatchedS2CEvt.AddPlayerIndex(builder, player_index);
    GameMatchedS2CEvt.AddMaxPlayer(builder, max_player);
    GameMatchedS2CEvt.AddDay(builder, day);
    GameMatchedS2CEvt.AddGameState(builder, game_state);
    return GameMatchedS2CEvt.EndGameMatchedS2CEvt(builder);
  }

  public static void StartGameMatchedS2CEvt(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddInsUid(FlatBufferBuilder builder, ulong insUid) { builder.AddUlong(0, insUid, 0); }
  public static void AddTimeStamp(FlatBufferBuilder builder, uint timeStamp) { builder.AddUint(1, timeStamp, 0); }
  public static void AddGameState(FlatBufferBuilder builder, SF.Flat.GameStateID gameState) { builder.AddSbyte(2, (sbyte)gameState, 0); }
  public static void AddDay(FlatBufferBuilder builder, byte day) { builder.AddByte(3, day, 0); }
  public static void AddMaxPlayer(FlatBufferBuilder builder, byte maxPlayer) { builder.AddByte(4, maxPlayer, 0); }
  public static void AddPlayerIndex(FlatBufferBuilder builder, byte playerIndex) { builder.AddByte(5, playerIndex, 0); }
  public static void AddPlayerCharacter(FlatBufferBuilder builder, byte playerCharacter) { builder.AddByte(6, playerCharacter, 0); }
  public static void AddRole(FlatBufferBuilder builder, byte role) { builder.AddByte(7, role, 0); }
  public static void AddDead(FlatBufferBuilder builder, byte dead) { builder.AddByte(8, dead, 0); }
  public static void AddChatHistoryData(FlatBufferBuilder builder, VectorOffset chatHistoryDataOffset) { builder.AddOffset(9, chatHistoryDataOffset.Value, 0); }
  public static VectorOffset CreateChatHistoryDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateChatHistoryDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChatHistoryDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChatHistoryDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChatHistoryDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddGameLogData(FlatBufferBuilder builder, VectorOffset gameLogDataOffset) { builder.AddOffset(10, gameLogDataOffset.Value, 0); }
  public static VectorOffset CreateGameLogDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGameLogDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGameLogDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGameLogDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGameLogDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddStamina(FlatBufferBuilder builder, uint stamina) { builder.AddUint(11, stamina, 0); }
  public static void AddTotalGem(FlatBufferBuilder builder, ulong totalGem) { builder.AddUlong(12, totalGem, 0); }
  public static void AddTotalGameMoney(FlatBufferBuilder builder, ulong totalGameMoney) { builder.AddUlong(13, totalGameMoney, 0); }
  public static Offset<SF.Flat.Game.GameMatchedS2CEvt> EndGameMatchedS2CEvt(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Game.GameMatchedS2CEvt>(o);
  }
}


static public class GameMatchedS2CEvtVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*InsUid*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TimeStamp*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*GameState*/, 1 /*SF.Flat.GameStateID*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*Day*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*MaxPlayer*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*PlayerIndex*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*PlayerCharacter*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*Role*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*Dead*/, 1 /*byte*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*ChatHistoryData*/, 1 /*byte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*GameLogData*/, 1 /*byte*/, false)
      && verifier.VerifyField(tablePos, 26 /*Stamina*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*TotalGem*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*TotalGameMoney*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
