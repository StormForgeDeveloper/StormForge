// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BuyShopItemCmd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static BuyShopItemCmd GetRootAsBuyShopItemCmd(ByteBuffer _bb) { return GetRootAsBuyShopItemCmd(_bb, new BuyShopItemCmd()); }
  public static BuyShopItemCmd GetRootAsBuyShopItemCmd(ByteBuffer _bb, BuyShopItemCmd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuyShopItemCmd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ShopItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Platform { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlatformBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPlatformBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPlatformArray() { return __p.__vector_as_array<byte>(6); }
  public string PackageName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPackageNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPackageNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPackageNameArray() { return __p.__vector_as_array<byte>(8); }
  public string PurchaseTransactionId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPurchaseTransactionIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPurchaseTransactionIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPurchaseTransactionIdArray() { return __p.__vector_as_array<byte>(10); }
  public byte PurchaseToken(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int PurchaseTokenLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPurchaseTokenBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPurchaseTokenBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPurchaseTokenArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<SF.Flat.Game.BuyShopItemCmd> CreateBuyShopItemCmd(FlatBufferBuilder builder,
      uint shop_item_id = 0,
      StringOffset platformOffset = default(StringOffset),
      StringOffset package_nameOffset = default(StringOffset),
      StringOffset purchase_transaction_idOffset = default(StringOffset),
      VectorOffset purchase_tokenOffset = default(VectorOffset)) {
    builder.StartTable(5);
    BuyShopItemCmd.AddPurchaseToken(builder, purchase_tokenOffset);
    BuyShopItemCmd.AddPurchaseTransactionId(builder, purchase_transaction_idOffset);
    BuyShopItemCmd.AddPackageName(builder, package_nameOffset);
    BuyShopItemCmd.AddPlatform(builder, platformOffset);
    BuyShopItemCmd.AddShopItemId(builder, shop_item_id);
    return BuyShopItemCmd.EndBuyShopItemCmd(builder);
  }

  public static void StartBuyShopItemCmd(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddShopItemId(FlatBufferBuilder builder, uint shopItemId) { builder.AddUint(0, shopItemId, 0); }
  public static void AddPlatform(FlatBufferBuilder builder, StringOffset platformOffset) { builder.AddOffset(1, platformOffset.Value, 0); }
  public static void AddPackageName(FlatBufferBuilder builder, StringOffset packageNameOffset) { builder.AddOffset(2, packageNameOffset.Value, 0); }
  public static void AddPurchaseTransactionId(FlatBufferBuilder builder, StringOffset purchaseTransactionIdOffset) { builder.AddOffset(3, purchaseTransactionIdOffset.Value, 0); }
  public static void AddPurchaseToken(FlatBufferBuilder builder, VectorOffset purchaseTokenOffset) { builder.AddOffset(4, purchaseTokenOffset.Value, 0); }
  public static VectorOffset CreatePurchaseTokenVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePurchaseTokenVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePurchaseTokenVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePurchaseTokenVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPurchaseTokenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<SF.Flat.Game.BuyShopItemCmd> EndBuyShopItemCmd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Game.BuyShopItemCmd>(o);
  }
}


static public class BuyShopItemCmdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ShopItemId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Platform*/, false)
      && verifier.VerifyString(tablePos, 8 /*PackageName*/, false)
      && verifier.VerifyString(tablePos, 10 /*PurchaseTransactionId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*PurchaseToken*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
