// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CreateCharacterCmd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static CreateCharacterCmd GetRootAsCreateCharacterCmd(ByteBuffer _bb) { return GetRootAsCreateCharacterCmd(_bb, new CreateCharacterCmd()); }
  public static CreateCharacterCmd GetRootAsCreateCharacterCmd(ByteBuffer _bb, CreateCharacterCmd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CreateCharacterCmd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CharacterName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCharacterNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCharacterNameArray() { return __p.__vector_as_array<byte>(4); }
  public byte PublicData(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int PublicDataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPublicDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPublicDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPublicDataArray() { return __p.__vector_as_array<byte>(6); }
  public byte PrivateData(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int PrivateDataLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrivateDataBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrivateDataBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrivateDataArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<SF.Flat.Game.CreateCharacterCmd> CreateCreateCharacterCmd(FlatBufferBuilder builder,
      StringOffset character_nameOffset = default(StringOffset),
      VectorOffset public_dataOffset = default(VectorOffset),
      VectorOffset private_dataOffset = default(VectorOffset)) {
    builder.StartTable(3);
    CreateCharacterCmd.AddPrivateData(builder, private_dataOffset);
    CreateCharacterCmd.AddPublicData(builder, public_dataOffset);
    CreateCharacterCmd.AddCharacterName(builder, character_nameOffset);
    return CreateCharacterCmd.EndCreateCharacterCmd(builder);
  }

  public static void StartCreateCharacterCmd(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCharacterName(FlatBufferBuilder builder, StringOffset characterNameOffset) { builder.AddOffset(0, characterNameOffset.Value, 0); }
  public static void AddPublicData(FlatBufferBuilder builder, VectorOffset publicDataOffset) { builder.AddOffset(1, publicDataOffset.Value, 0); }
  public static VectorOffset CreatePublicDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePublicDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPublicDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddPrivateData(FlatBufferBuilder builder, VectorOffset privateDataOffset) { builder.AddOffset(2, privateDataOffset.Value, 0); }
  public static VectorOffset CreatePrivateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePrivateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePrivateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePrivateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPrivateDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<SF.Flat.Game.CreateCharacterCmd> EndCreateCharacterCmd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Game.CreateCharacterCmd>(o);
  }
}


static public class CreateCharacterCmdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*CharacterName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*PublicData*/, 1 /*byte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*PrivateData*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
