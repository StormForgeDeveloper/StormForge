// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct NotifyS2CEvt : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static NotifyS2CEvt GetRootAsNotifyS2CEvt(ByteBuffer _bb) { return GetRootAsNotifyS2CEvt(_bb, new NotifyS2CEvt()); }
  public static NotifyS2CEvt GetRootAsNotifyS2CEvt(ByteBuffer _bb, NotifyS2CEvt obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NotifyS2CEvt __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint NotificationId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NotificationType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte Parameters(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ParametersLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParametersBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetParametersBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetParametersArray() { return __p.__vector_as_array<byte>(8); }
  public byte IsRead { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ulong TimeStamp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<SF.Flat.Game.NotifyS2CEvt> CreateNotifyS2CEvt(FlatBufferBuilder builder,
      uint notification_id = 0,
      uint notification_type = 0,
      VectorOffset parametersOffset = default(VectorOffset),
      byte is_read = 0,
      ulong time_stamp = 0) {
    builder.StartTable(5);
    NotifyS2CEvt.AddTimeStamp(builder, time_stamp);
    NotifyS2CEvt.AddParameters(builder, parametersOffset);
    NotifyS2CEvt.AddNotificationType(builder, notification_type);
    NotifyS2CEvt.AddNotificationId(builder, notification_id);
    NotifyS2CEvt.AddIsRead(builder, is_read);
    return NotifyS2CEvt.EndNotifyS2CEvt(builder);
  }

  public static void StartNotifyS2CEvt(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddNotificationId(FlatBufferBuilder builder, uint notificationId) { builder.AddUint(0, notificationId, 0); }
  public static void AddNotificationType(FlatBufferBuilder builder, uint notificationType) { builder.AddUint(1, notificationType, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(2, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddIsRead(FlatBufferBuilder builder, byte isRead) { builder.AddByte(3, isRead, 0); }
  public static void AddTimeStamp(FlatBufferBuilder builder, ulong timeStamp) { builder.AddUlong(4, timeStamp, 0); }
  public static Offset<SF.Flat.Game.NotifyS2CEvt> EndNotifyS2CEvt(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Game.NotifyS2CEvt>(o);
  }
}


static public class NotifyS2CEvtVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*NotificationId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*NotificationType*/, 4 /*uint*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Parameters*/, 1 /*byte*/, false)
      && verifier.VerifyField(tablePos, 10 /*IsRead*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*TimeStamp*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
