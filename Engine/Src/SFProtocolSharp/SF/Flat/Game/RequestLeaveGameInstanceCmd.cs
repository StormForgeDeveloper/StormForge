// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RequestLeaveGameInstanceCmd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static RequestLeaveGameInstanceCmd GetRootAsRequestLeaveGameInstanceCmd(ByteBuffer _bb) { return GetRootAsRequestLeaveGameInstanceCmd(_bb, new RequestLeaveGameInstanceCmd()); }
  public static RequestLeaveGameInstanceCmd GetRootAsRequestLeaveGameInstanceCmd(ByteBuffer _bb, RequestLeaveGameInstanceCmd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RequestLeaveGameInstanceCmd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SF.Flat.GameInstanceUID? InsUid { get { int o = __p.__offset(4); return o != 0 ? (SF.Flat.GameInstanceUID?)(new SF.Flat.GameInstanceUID()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartRequestLeaveGameInstanceCmd(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddInsUid(FlatBufferBuilder builder, Offset<SF.Flat.GameInstanceUID> insUidOffset) { builder.AddStruct(0, insUidOffset.Value, 0); }
  public static Offset<SF.Flat.Game.RequestLeaveGameInstanceCmd> EndRequestLeaveGameInstanceCmd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Game.RequestLeaveGameInstanceCmd>(o);
  }
}


static public class RequestLeaveGameInstanceCmdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*InsUid*/, 4 /*SF.Flat.GameInstanceUID*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
