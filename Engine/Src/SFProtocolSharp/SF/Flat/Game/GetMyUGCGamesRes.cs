// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GetMyUGCGamesRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static GetMyUGCGamesRes GetRootAsGetMyUGCGamesRes(ByteBuffer _bb) { return GetRootAsGetMyUGCGamesRes(_bb, new GetMyUGCGamesRes()); }
  public static GetMyUGCGamesRes GetRootAsGetMyUGCGamesRes(ByteBuffer _bb, GetMyUGCGamesRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GetMyUGCGamesRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SF.Flat.UGCGameInfo? Ugccontents(int j) { int o = __p.__offset(4); return o != 0 ? (SF.Flat.UGCGameInfo?)(new SF.Flat.UGCGameInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UgccontentsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SF.Flat.Game.GetMyUGCGamesRes> CreateGetMyUGCGamesRes(FlatBufferBuilder builder,
      VectorOffset ugccontentsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    GetMyUGCGamesRes.AddUgccontents(builder, ugccontentsOffset);
    return GetMyUGCGamesRes.EndGetMyUGCGamesRes(builder);
  }

  public static void StartGetMyUGCGamesRes(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddUgccontents(FlatBufferBuilder builder, VectorOffset ugccontentsOffset) { builder.AddOffset(0, ugccontentsOffset.Value, 0); }
  public static VectorOffset CreateUgccontentsVector(FlatBufferBuilder builder, Offset<SF.Flat.UGCGameInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUgccontentsVectorBlock(FlatBufferBuilder builder, Offset<SF.Flat.UGCGameInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUgccontentsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<SF.Flat.UGCGameInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUgccontentsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<SF.Flat.UGCGameInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUgccontentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SF.Flat.Game.GetMyUGCGamesRes> EndGetMyUGCGamesRes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Game.GetMyUGCGamesRes>(o);
  }
}


static public class GetMyUGCGamesResVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Ugccontents*/, SF.Flat.UGCGameInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
