// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Login
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LoginWithIDPWRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static LoginWithIDPWRes GetRootAsLoginWithIDPWRes(ByteBuffer _bb) { return GetRootAsLoginWithIDPWRes(_bb, new LoginWithIDPWRes()); }
  public static LoginWithIDPWRes GetRootAsLoginWithIDPWRes(ByteBuffer _bb, LoginWithIDPWRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoginWithIDPWRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Result { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string NickName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNickNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNickNameArray() { return __p.__vector_as_array<byte>(6); }
  public ulong AccountId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string BannedReason { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBannedReasonBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBannedReasonBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBannedReasonArray() { return __p.__vector_as_array<byte>(10); }
  public string GameServerAddress { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameServerAddressBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGameServerAddressBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGameServerAddressArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<SF.Flat.Login.LoginWithIDPWRes> CreateLoginWithIDPWRes(FlatBufferBuilder builder,
      uint result = 0,
      StringOffset nick_nameOffset = default(StringOffset),
      ulong account_id = 0,
      StringOffset banned_reasonOffset = default(StringOffset),
      StringOffset game_server_addressOffset = default(StringOffset)) {
    builder.StartTable(5);
    LoginWithIDPWRes.AddAccountId(builder, account_id);
    LoginWithIDPWRes.AddGameServerAddress(builder, game_server_addressOffset);
    LoginWithIDPWRes.AddBannedReason(builder, banned_reasonOffset);
    LoginWithIDPWRes.AddNickName(builder, nick_nameOffset);
    LoginWithIDPWRes.AddResult(builder, result);
    return LoginWithIDPWRes.EndLoginWithIDPWRes(builder);
  }

  public static void StartLoginWithIDPWRes(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddResult(FlatBufferBuilder builder, uint result) { builder.AddUint(0, result, 0); }
  public static void AddNickName(FlatBufferBuilder builder, StringOffset nickNameOffset) { builder.AddOffset(1, nickNameOffset.Value, 0); }
  public static void AddAccountId(FlatBufferBuilder builder, ulong accountId) { builder.AddUlong(2, accountId, 0); }
  public static void AddBannedReason(FlatBufferBuilder builder, StringOffset bannedReasonOffset) { builder.AddOffset(3, bannedReasonOffset.Value, 0); }
  public static void AddGameServerAddress(FlatBufferBuilder builder, StringOffset gameServerAddressOffset) { builder.AddOffset(4, gameServerAddressOffset.Value, 0); }
  public static Offset<SF.Flat.Login.LoginWithIDPWRes> EndLoginWithIDPWRes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // nick_name
    builder.Required(o, 10);  // banned_reason
    builder.Required(o, 12);  // game_server_address
    return new Offset<SF.Flat.Login.LoginWithIDPWRes>(o);
  }
}


static public class LoginWithIDPWResVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Result*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*NickName*/, true)
      && verifier.VerifyField(tablePos, 8 /*AccountId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*BannedReason*/, true)
      && verifier.VerifyString(tablePos, 12 /*GameServerAddress*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
