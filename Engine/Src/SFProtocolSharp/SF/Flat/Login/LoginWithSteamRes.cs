// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Login
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LoginWithSteamRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static LoginWithSteamRes GetRootAsLoginWithSteamRes(ByteBuffer _bb) { return GetRootAsLoginWithSteamRes(_bb, new LoginWithSteamRes()); }
  public static LoginWithSteamRes GetRootAsLoginWithSteamRes(ByteBuffer _bb, LoginWithSteamRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyLoginWithSteamRes(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, LoginWithSteamResVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoginWithSteamRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Result { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string NickName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNickNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNickNameArray() { return __p.__vector_as_array<byte>(6); }
  public ulong AccountId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong AuthTicket { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string BannedReason { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBannedReasonBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBannedReasonBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBannedReasonArray() { return __p.__vector_as_array<byte>(12); }
  public string GameServerAddress { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameServerAddressBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetGameServerAddressBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetGameServerAddressArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<SF.Flat.Login.LoginWithSteamRes> CreateLoginWithSteamRes(FlatBufferBuilder builder,
      uint result = 0,
      StringOffset nick_nameOffset = default(StringOffset),
      ulong account_id = 0,
      ulong auth_ticket = 0,
      StringOffset banned_reasonOffset = default(StringOffset),
      StringOffset game_server_addressOffset = default(StringOffset)) {
    builder.StartTable(6);
    LoginWithSteamRes.AddAuthTicket(builder, auth_ticket);
    LoginWithSteamRes.AddAccountId(builder, account_id);
    LoginWithSteamRes.AddGameServerAddress(builder, game_server_addressOffset);
    LoginWithSteamRes.AddBannedReason(builder, banned_reasonOffset);
    LoginWithSteamRes.AddNickName(builder, nick_nameOffset);
    LoginWithSteamRes.AddResult(builder, result);
    return LoginWithSteamRes.EndLoginWithSteamRes(builder);
  }

  public static void StartLoginWithSteamRes(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddResult(FlatBufferBuilder builder, uint result) { builder.AddUint(0, result, 0); }
  public static void AddNickName(FlatBufferBuilder builder, StringOffset nickNameOffset) { builder.AddOffset(1, nickNameOffset.Value, 0); }
  public static void AddAccountId(FlatBufferBuilder builder, ulong accountId) { builder.AddUlong(2, accountId, 0); }
  public static void AddAuthTicket(FlatBufferBuilder builder, ulong authTicket) { builder.AddUlong(3, authTicket, 0); }
  public static void AddBannedReason(FlatBufferBuilder builder, StringOffset bannedReasonOffset) { builder.AddOffset(4, bannedReasonOffset.Value, 0); }
  public static void AddGameServerAddress(FlatBufferBuilder builder, StringOffset gameServerAddressOffset) { builder.AddOffset(5, gameServerAddressOffset.Value, 0); }
  public static Offset<SF.Flat.Login.LoginWithSteamRes> EndLoginWithSteamRes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Login.LoginWithSteamRes>(o);
  }
  public static void FinishLoginWithSteamResBuffer(FlatBufferBuilder builder, Offset<SF.Flat.Login.LoginWithSteamRes> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLoginWithSteamResBuffer(FlatBufferBuilder builder, Offset<SF.Flat.Login.LoginWithSteamRes> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class LoginWithSteamResVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Result*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*NickName*/, false)
      && verifier.VerifyField(tablePos, 8 /*AccountId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*AuthTicket*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 12 /*BannedReason*/, false)
      && verifier.VerifyString(tablePos, 14 /*GameServerAddress*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
