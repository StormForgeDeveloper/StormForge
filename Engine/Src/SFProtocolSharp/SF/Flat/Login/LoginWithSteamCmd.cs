// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Login
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LoginWithSteamCmd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static LoginWithSteamCmd GetRootAsLoginWithSteamCmd(ByteBuffer _bb) { return GetRootAsLoginWithSteamCmd(_bb, new LoginWithSteamCmd()); }
  public static LoginWithSteamCmd GetRootAsLoginWithSteamCmd(ByteBuffer _bb, LoginWithSteamCmd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoginWithSteamCmd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong SteamAppId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong SteamPlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string SteamPlayerName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSteamPlayerNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSteamPlayerNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSteamPlayerNameArray() { return __p.__vector_as_array<byte>(8); }
  public string SteamPlayerToken { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSteamPlayerTokenBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSteamPlayerTokenBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSteamPlayerTokenArray() { return __p.__vector_as_array<byte>(10); }
  public string GameId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGameIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGameIdArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<SF.Flat.Login.LoginWithSteamCmd> CreateLoginWithSteamCmd(FlatBufferBuilder builder,
      ulong steam_app_id = 0,
      ulong steam_player_id = 0,
      StringOffset steam_player_nameOffset = default(StringOffset),
      StringOffset steam_player_tokenOffset = default(StringOffset),
      StringOffset game_idOffset = default(StringOffset)) {
    builder.StartTable(5);
    LoginWithSteamCmd.AddSteamPlayerId(builder, steam_player_id);
    LoginWithSteamCmd.AddSteamAppId(builder, steam_app_id);
    LoginWithSteamCmd.AddGameId(builder, game_idOffset);
    LoginWithSteamCmd.AddSteamPlayerToken(builder, steam_player_tokenOffset);
    LoginWithSteamCmd.AddSteamPlayerName(builder, steam_player_nameOffset);
    return LoginWithSteamCmd.EndLoginWithSteamCmd(builder);
  }

  public static void StartLoginWithSteamCmd(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSteamAppId(FlatBufferBuilder builder, ulong steamAppId) { builder.AddUlong(0, steamAppId, 0); }
  public static void AddSteamPlayerId(FlatBufferBuilder builder, ulong steamPlayerId) { builder.AddUlong(1, steamPlayerId, 0); }
  public static void AddSteamPlayerName(FlatBufferBuilder builder, StringOffset steamPlayerNameOffset) { builder.AddOffset(2, steamPlayerNameOffset.Value, 0); }
  public static void AddSteamPlayerToken(FlatBufferBuilder builder, StringOffset steamPlayerTokenOffset) { builder.AddOffset(3, steamPlayerTokenOffset.Value, 0); }
  public static void AddGameId(FlatBufferBuilder builder, StringOffset gameIdOffset) { builder.AddOffset(4, gameIdOffset.Value, 0); }
  public static Offset<SF.Flat.Login.LoginWithSteamCmd> EndLoginWithSteamCmd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Login.LoginWithSteamCmd>(o);
  }
}


static public class LoginWithSteamCmdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SteamAppId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*SteamPlayerId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*SteamPlayerName*/, false)
      && verifier.VerifyString(tablePos, 10 /*SteamPlayerToken*/, false)
      && verifier.VerifyString(tablePos, 12 /*GameId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
