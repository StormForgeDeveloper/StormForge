// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SF.Flat.Login
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LoginWithSteamRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static LoginWithSteamRequest GetRootAsLoginWithSteamRequest(ByteBuffer _bb) { return GetRootAsLoginWithSteamRequest(_bb, new LoginWithSteamRequest()); }
  public static LoginWithSteamRequest GetRootAsLoginWithSteamRequest(ByteBuffer _bb, LoginWithSteamRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoginWithSteamRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong AppId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong SteamId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string SteamPlayerName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSteamPlayerNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSteamPlayerNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSteamPlayerNameArray() { return __p.__vector_as_array<byte>(8); }
  public string SteamUserToken { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSteamUserTokenBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSteamUserTokenBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSteamUserTokenArray() { return __p.__vector_as_array<byte>(10); }
  public string GameId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGameIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGameIdArray() { return __p.__vector_as_array<byte>(12); }
  public ulong Uid { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<SF.Flat.Login.LoginWithSteamRequest> CreateLoginWithSteamRequest(FlatBufferBuilder builder,
      ulong app_id = 0,
      ulong steam_id = 0,
      StringOffset steam_player_nameOffset = default(StringOffset),
      StringOffset steam_user_tokenOffset = default(StringOffset),
      StringOffset game_idOffset = default(StringOffset),
      ulong uid = 0) {
    builder.StartTable(6);
    LoginWithSteamRequest.AddUid(builder, uid);
    LoginWithSteamRequest.AddSteamId(builder, steam_id);
    LoginWithSteamRequest.AddAppId(builder, app_id);
    LoginWithSteamRequest.AddGameId(builder, game_idOffset);
    LoginWithSteamRequest.AddSteamUserToken(builder, steam_user_tokenOffset);
    LoginWithSteamRequest.AddSteamPlayerName(builder, steam_player_nameOffset);
    return LoginWithSteamRequest.EndLoginWithSteamRequest(builder);
  }

  public static void StartLoginWithSteamRequest(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddAppId(FlatBufferBuilder builder, ulong appId) { builder.AddUlong(0, appId, 0); }
  public static void AddSteamId(FlatBufferBuilder builder, ulong steamId) { builder.AddUlong(1, steamId, 0); }
  public static void AddSteamPlayerName(FlatBufferBuilder builder, StringOffset steamPlayerNameOffset) { builder.AddOffset(2, steamPlayerNameOffset.Value, 0); }
  public static void AddSteamUserToken(FlatBufferBuilder builder, StringOffset steamUserTokenOffset) { builder.AddOffset(3, steamUserTokenOffset.Value, 0); }
  public static void AddGameId(FlatBufferBuilder builder, StringOffset gameIdOffset) { builder.AddOffset(4, gameIdOffset.Value, 0); }
  public static void AddUid(FlatBufferBuilder builder, ulong uid) { builder.AddUlong(5, uid, 0); }
  public static Offset<SF.Flat.Login.LoginWithSteamRequest> EndLoginWithSteamRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SF.Flat.Login.LoginWithSteamRequest>(o);
  }
}


static public class LoginWithSteamRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*AppId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*SteamId*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*SteamPlayerName*/, false)
      && verifier.VerifyString(tablePos, 10 /*SteamUserToken*/, false)
      && verifier.VerifyString(tablePos, 12 /*GameId*/, false)
      && verifier.VerifyField(tablePos, 14 /*Uid*/, 8 /*ulong*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
