////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : Autogenerated header, Net
//
////////////////////////////////////////////////////////////////////////////////

#include "SFTypedefs.h"
#include "ResultCode/SFResultTable.h"
#include "ResultCode/SFResultCodeNet.h"



namespace SF {
namespace ResultCode {

	void InitializeResultCodeNet() {

		auto& codeMap = ResultTable::GetOrAddFacility(1795);
		codeMap.Insert((uint32_t)			SUCCESS_NET_PROCESSED_SEQUENCE        , {"			SUCCESS_NET_PROCESSED_SEQUENCE        ", "Network sequence already processed"});
		codeMap.Insert((uint32_t)			NET_PROTOCOL_VERSION_MISMATCH        , {"			NET_PROTOCOL_VERSION_MISMATCH        ", "The version not available or miss match with system."});
		codeMap.Insert((uint32_t)			NET_NOTINITIALIZED        , {"			NET_NOTINITIALIZED        ", "Network is not initialized"});
		codeMap.Insert((uint32_t)			NET_INVALID_NETCLASS        , {"			NET_INVALID_NETCLASS        ", "The version not available or miss match with system."});
		codeMap.Insert((uint32_t)			NET_NOT_ENOUGH_WINDOWSPACE        , {"			NET_NOT_ENOUGH_WINDOWSPACE        ", "Not enough space in sliding window"});
		codeMap.Insert((uint32_t)			NET_IO_ABORTED        , {"			NET_IO_ABORTED        ", "Network IO aborted"});
		codeMap.Insert((uint32_t)			NET_IO_SEND_FAIL        , {"			NET_IO_SEND_FAIL        ", "Network IO send failed"});
		codeMap.Insert((uint32_t)			NET_IO_RECV_FAIL        , {"			NET_IO_RECV_FAIL        ", "Network IO recv failed"});
		codeMap.Insert((uint32_t)			NET_SEND_FAIL        , {"			NET_SEND_FAIL        ", "Network send failed"});
		codeMap.Insert((uint32_t)			NET_RECV_FAIL        , {"			NET_RECV_FAIL        ", "Network recv failed"});
		codeMap.Insert((uint32_t)			NET_INVALID_SEQUENCE        , {"			NET_INVALID_SEQUENCE        ", "Network Message sequence is invalid"});
		codeMap.Insert((uint32_t)			NET_BADPACKET_SIZE        , {"			NET_BADPACKET_SIZE        ", "Network Message not expected bad packet size"});
		codeMap.Insert((uint32_t)			NET_CONNECTION_CLOSED        , {"			NET_CONNECTION_CLOSED        ", "Network connection closed"});
		codeMap.Insert((uint32_t)			NET_NOT_CONNECTED        , {"			NET_NOT_CONNECTED        ", "Network connection is never made"});
		codeMap.Insert((uint32_t)			NET_INVALID_CID        , {"			NET_INVALID_CID        ", "Network connection ID is invalid"});
		codeMap.Insert((uint32_t)			NET_CONNECTION_TIMEOUT        , {"			NET_CONNECTION_TIMEOUT        ", "Network Connection timeout"});
		codeMap.Insert((uint32_t)			NET_CONNECTION_FAIL        , {"			NET_CONNECTION_FAIL        ", "Network connection is failed"});
		codeMap.Insert((uint32_t)			NET_BADPACKET_TOOBIG        , {"			NET_BADPACKET_TOOBIG        ", "Too big packet data"});
		codeMap.Insert((uint32_t)			NET_BADPACKET_NOTEXPECTED        , {"			NET_BADPACKET_NOTEXPECTED        ", "Network Message not expected bad packet"});
		codeMap.Insert((uint32_t)			NET_INVALID_MESSAGE_CHECKSUM        , {"			NET_INVALID_MESSAGE_CHECKSUM        ", "Checksum value of the message is invalid"});
		codeMap.Insert((uint32_t)			NET_INVALID_MESSAGE_ENCRYPTION        , {"			NET_INVALID_MESSAGE_ENCRYPTION        ", "Message encryption is invalid"});
		codeMap.Insert((uint32_t)			NET_INVALID_CONNECTION_STATE        , {"			NET_INVALID_CONNECTION_STATE        ", "Invalid connection state"});
		codeMap.Insert((uint32_t)			NET_SEQUENCE_OVERFLOW        , {"			NET_SEQUENCE_OVERFLOW        ", "Too big sequence id"});
		codeMap.Insert((uint32_t)			NET_INTR        , {"			NET_INTR        ", "A blocking operation was interrupted by a call to WSACancelBlockingCall."});
		codeMap.Insert((uint32_t)			NET_BADF        , {"			NET_BADF        ", "The file handle supplied is not valid."});
		codeMap.Insert((uint32_t)			NET_ACCES        , {"			NET_ACCES        ", "An attempt was made to access a socket in a way forbidden by its access permissions"});
		codeMap.Insert((uint32_t)			NET_FAULT        , {"			NET_FAULT        ", "The system detected an invalid pointer address in attempting to use a pointer argument in a call."});
		codeMap.Insert((uint32_t)			NET_INVAL        , {"			NET_INVAL        ", "An invalid argument was supplied."});
		codeMap.Insert((uint32_t)			NET_MFILE        , {"			NET_MFILE        ", "Too many open sockets."});
		codeMap.Insert((uint32_t)			NET_WOULDBLOCK        , {"			NET_WOULDBLOCK        ", "A non-blocking socket operation could not be completed immediately."});
		codeMap.Insert((uint32_t)			NET_INPROGRESS        , {"			NET_INPROGRESS        ", "A blocking operation is currently executing."});
		codeMap.Insert((uint32_t)			NET_ALREADY        , {"			NET_ALREADY        ", "An operation was attempted on a non-blocking socket that already had an operation in progress."});
		codeMap.Insert((uint32_t)			NET_NOTSOCK        , {"			NET_NOTSOCK        ", "An operation was attempted on something that is not a socket."});
		codeMap.Insert((uint32_t)			NET_DESTADDRREQ        , {"			NET_DESTADDRREQ        ", "A required address was omitted from an operation on a socket."});
		codeMap.Insert((uint32_t)			NET_NETDOWN        , {"			NET_NETDOWN        ", "A socket operation encountered a dead network."});
		codeMap.Insert((uint32_t)			NET_NETUNREACH        , {"			NET_NETUNREACH        ", "A socket operation was attempted to an unreachable network."});
		codeMap.Insert((uint32_t)			NET_NETRESET        , {"			NET_NETRESET        ", "The connection has been broken due to keep-alive activity detecting a failure while the operation was in progress."});
		codeMap.Insert((uint32_t)			NET_CONNABORTED        , {"			NET_CONNABORTED        ", "An established connection was aborted by the software in your host machine."});
		codeMap.Insert((uint32_t)			NET_CONNRESET        , {"			NET_CONNRESET        ", "An existing connection was forcibly closed by the remote host."});
		codeMap.Insert((uint32_t)			NET_NOBUFS        , {"			NET_NOBUFS        ", "An operation on a socket could not be performed because the system lacked sufficient buffer space or because a queue was full."});
		codeMap.Insert((uint32_t)			NET_ISCONN        , {"			NET_ISCONN        ", "A connect request was made on an already connected socket."});
		codeMap.Insert((uint32_t)			NET_NOTCONN        , {"			NET_NOTCONN        ", "A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied."});
		codeMap.Insert((uint32_t)			NET_SHUTDOWN        , {"			NET_SHUTDOWN        ", "A request to send or receive data was disallowed because the socket had already been shut down in that direction with a previous shutdown call."});
		codeMap.Insert((uint32_t)			NET_TOOMANYREFS        , {"			NET_TOOMANYREFS        ", "Too many references to some kernel object."});
		codeMap.Insert((uint32_t)			NET_TIMEDOUT        , {"			NET_TIMEDOUT        ", "A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond."});
		codeMap.Insert((uint32_t)			NET_CONNECTION_REFUSSED        , {"			NET_CONNECTION_REFUSSED        ", "No connection could be made because the target machine actively refused it."});
		codeMap.Insert((uint32_t)			NET_LOOP        , {"			NET_LOOP        ", "Cannot translate name."});
		codeMap.Insert((uint32_t)			NET_NAMETOOLONG        , {"			NET_NAMETOOLONG        ", "Name component or name was too long."});
		codeMap.Insert((uint32_t)			NET_HOSTDOWN        , {"			NET_HOSTDOWN        ", "A socket operation failed because the destination host was down."});
		codeMap.Insert((uint32_t)			NET_HOSTUNREACH        , {"			NET_HOSTUNREACH        ", "A socket operation was attempted to an unreachable host."});
		codeMap.Insert((uint32_t)			NET_NOTEMPTY        , {"			NET_NOTEMPTY        ", "Cannot remove a directory that is not empty."});
		codeMap.Insert((uint32_t)			NET_PROCLIM        , {"			NET_PROCLIM        ", "A Windows Sockets implementation may have a limit on the number of applications that may use it simultaneously."});
		codeMap.Insert((uint32_t)			NET_SYSNOTREADY        , {"			NET_SYSNOTREADY        ", "WSAStartup cannot function at this time because the underlying system it uses to provide network services is currently unavailable."});
		codeMap.Insert((uint32_t)			NET_VERNOTSUPPORTED        , {"			NET_VERNOTSUPPORTED        ", "The Windows Sockets version requested is not supported."});
		codeMap.Insert((uint32_t)			NET_NOTINITIALISED        , {"			NET_NOTINITIALISED        ", "Either the application has not called WSAStartup, or WSAStartup failed."});
		codeMap.Insert((uint32_t)			NET_DISCON        , {"			NET_DISCON        ", "Returned by WSARecv or WSARecvFrom to indicate the remote party has initiated a graceful shutdown sequence."});
		codeMap.Insert((uint32_t)			NET_SYSCALLFAILURE        , {"			NET_SYSCALLFAILURE        ", "A system call has failed."});
		codeMap.Insert((uint32_t)			NET_HOST_NOT_FOUND        , {"			NET_HOST_NOT_FOUND        ", "Host not found."});
		codeMap.Insert((uint32_t)			NET_TRY_AGAIN        , {"			NET_TRY_AGAIN        ", "Try again"});
		codeMap.Insert((uint32_t)			NET_IO_PENDING        , {"			NET_IO_PENDING        ", "IOPending"});
		codeMap.Insert((uint32_t)			NET_SECURE_HOST_NOT_FOUND        , {"			NET_SECURE_HOST_NOT_FOUND        ", "No such host is known securely."});
		codeMap.Insert((uint32_t)			NET_PROTO        , {"			NET_PROTO        ", "Protocol error"});
		codeMap.Insert((uint32_t)			NET_PROTOTYPE        , {"			NET_PROTOTYPE        ", "Protocol wrong type for socket."});
		codeMap.Insert((uint32_t)			NET_NOPROTOOPT        , {"			NET_NOPROTOOPT        ", "Protocol not available"});
		codeMap.Insert((uint32_t)			NET_NONET        , {"			NET_NONET        ", "Machine is not on the network"});
		codeMap.Insert((uint32_t)			NET_OPNOTSUPP        , {"			NET_OPNOTSUPP        ", "Operation not supported on socket"});
		codeMap.Insert((uint32_t)			NET_BADFLAGS        , {"			NET_BADFLAGS        ", "An invalid value was provided for the ai_flags member of the pHints parameter."});
		codeMap.Insert((uint32_t)			NET_FAMILY        , {"			NET_FAMILY        ", "Bad network family"});
		codeMap.Insert((uint32_t)			NET_INVALID_SERVICE        , {"			NET_INVALID_SERVICE        ", "The pServiceName parameter is not supported for the specified ai_socktype member of the pHints parameter."});
		codeMap.Insert((uint32_t)			NET_INVALID_ADDRESS        , {"			NET_INVALID_ADDRESS        ", "Invalid network address"});
		codeMap.Insert((uint32_t)			NET_ADDRINUSE        , {"			NET_ADDRINUSE        ", "Address in use"});
		codeMap.Insert((uint32_t)			NET_BADPACKET        , {"			NET_BADPACKET        ", "Network Message not expected packet data"});
		codeMap.Insert((uint32_t)			NET_DISCONNECTED        , {"			NET_DISCONNECTED        ", "Disconnected"});

	}//InitializeResultCode 
}//namespace ResultCode 
}//namespace SF 



