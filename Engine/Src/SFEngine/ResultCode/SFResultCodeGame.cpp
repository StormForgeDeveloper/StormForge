////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : Autogenerated header, Game
//
////////////////////////////////////////////////////////////////////////////////

#include "SFTypedefs.h"
#include "ResultCode/SFResultTable.h"
#include "ResultCode/SFResultCodeGame.h"



namespace SF {
namespace ResultCode {

	void InitializeResultCodeGame() {

		auto& codeMap = ResultTable::GetOrAddFacility(1796);
		codeMap.Insert((uint32_t)GAME_ALREADY_IN_GAME, {"GAME_ALREADY_IN_GAME", "User is already in a game"});
		codeMap.Insert((uint32_t)GAME_INVALID_PLAYER, {"GAME_INVALID_PLAYER", "Invalid player"});
		codeMap.Insert((uint32_t)GAME_NOTREADY, {"GAME_NOTREADY", "Game is not ready"});
		codeMap.Insert((uint32_t)GAME_INVALID_PLAYER_STATE, {"GAME_INVALID_PLAYER_STATE", "Invalid player state to do the action"});
		codeMap.Insert((uint32_t)GAME_NO_MATCHING_HARVEST_ID, {"GAME_NO_MATCHING_HARVEST_ID", "Failed to find matching harvest id"});
		codeMap.Insert((uint32_t)GAME_INVALID_SHOPITEM, {"GAME_INVALID_SHOPITEM", "Invalid shop item data"});
		codeMap.Insert((uint32_t)GAME_INVALID_SHOPITEMID, {"GAME_INVALID_SHOPITEMID", "Invalid shop item id"});
		codeMap.Insert((uint32_t)GAME_ALREADY_IN_PARTY, {"GAME_ALREADY_IN_PARTY", "User is already in a party"});
		codeMap.Insert((uint32_t)GAME_INVALID_PARTYID, {"GAME_INVALID_PARTYID", "Invalid partyID"});
		codeMap.Insert((uint32_t)GAME_INVALID_PLAYER_COUNT, {"GAME_INVALID_PLAYER_COUNT", "Invalid player count for game"});
		codeMap.Insert((uint32_t)GAME_NO_PRIVILEGE, {"GAME_NO_PRIVILEGE", "User doesn't have eligible privilege"});
		codeMap.Insert((uint32_t)GAME_NOTENOUGH_RESOURCE, {"GAME_NOTENOUGH_RESOURCE", "Not enough money(gold, gem, etc)"});
		codeMap.Insert((uint32_t)GAME_MAX_NOTIFICATION, {"GAME_MAX_NOTIFICATION", "Maximum notification count"});
		codeMap.Insert((uint32_t)GAME_MAX_TRY, {"GAME_MAX_TRY", "Maximum try reached"});
		codeMap.Insert((uint32_t)GAME_ALREADY_IN_CHAT, {"GAME_ALREADY_IN_CHAT", "User is already in a chatting channel"});
		codeMap.Insert((uint32_t)GAME_MAPOBJECT_INVALID, {"GAME_MAPOBJECT_INVALID", "Map object is invalid"});
		codeMap.Insert((uint32_t)GAME_OCCUPIED_MAPOBJECT_IS_REQUIRED, {"GAME_OCCUPIED_MAPOBJECT_IS_REQUIRED", "Map object is required to be occupied"});
		codeMap.Insert((uint32_t)GAME_MAPOBJECT_ALREADY_IN_USE, {"GAME_MAPOBJECT_ALREADY_IN_USE", "Map object is already in use"});
		codeMap.Insert((uint32_t)GAME_MAPOBJECT_NOT_IN_USE, {"GAME_MAPOBJECT_NOT_IN_USE", "Map object is not in use"});
		codeMap.Insert((uint32_t)GAME_MAPOBJECT_NOT_FOUND, {"GAME_MAPOBJECT_NOT_FOUND", "Map object is already in use"});
		codeMap.Insert((uint32_t)GAME_MAPOBJECT_NOT_OCCUPIED_BY_PLAYER, {"GAME_MAPOBJECT_NOT_OCCUPIED_BY_PLAYER", "Map object is not occupied by the player"});
		codeMap.Insert((uint32_t)GAME_INVALID_NPCID, {"GAME_INVALID_NPCID", "Invalid NPC id"});
		codeMap.Insert((uint32_t)GAME_UNEXPECTED_TABLE_VALUE, {"GAME_UNEXPECTED_TABLE_VALUE", "Unexpected table value"});
		codeMap.Insert((uint32_t)GAME_NOT_ENOUGH_CURRENCY, {"GAME_NOT_ENOUGH_CURRENCY", "Not enough currency"});
		codeMap.Insert((uint32_t)GAME_NOT_ENOUGH_STAMINA, {"GAME_NOT_ENOUGH_STAMINA", "Not enough stamina"});
		codeMap.Insert((uint32_t)GAME_PLAYER_IS_BUSY, {"GAME_PLAYER_IS_BUSY", "The player is busy"});
		codeMap.Insert((uint32_t)GAME_PLAYER_TOO_FAR_AWAY, {"GAME_PLAYER_TOO_FAR_AWAY", "The player is too far away"});
		codeMap.Insert((uint32_t)GAME_INVALID_GOLD_VALUE, {"GAME_INVALID_GOLD_VALUE", "Invalid gold value has been specified"});
		codeMap.Insert((uint32_t)GAME_INVALID_ROLE, {"GAME_INVALID_ROLE", "Invalid player role"});
		codeMap.Insert((uint32_t)GAME_NOT_READY_FOR_NEXT_STATE, {"GAME_NOT_READY_FOR_NEXT_STATE", "Not ready for next game play state"});
		codeMap.Insert((uint32_t)GAME_INVALID_VOTETYPE, {"GAME_INVALID_VOTETYPE", "Invalid vote type"});
		codeMap.Insert((uint32_t)GAME_INVALID_VOTE_STATE, {"GAME_INVALID_VOTE_STATE", "Invalid vote state"});
		codeMap.Insert((uint32_t)GAME_INVALID_VOTE_TARGET, {"GAME_INVALID_VOTE_TARGET", "Invalid vote target"});
		codeMap.Insert((uint32_t)GAME_NO_SUFFRAGE, {"GAME_NO_SUFFRAGE", "No suffrage"});
		codeMap.Insert((uint32_t)GAME_INVALID_GAMESTATE, {"GAME_INVALID_GAMESTATE", "Invalid game state"});
		codeMap.Insert((uint32_t)GAME_LOW_STAMINA, {"GAME_LOW_STAMINA", "Doesn't have enough stamina"});
		codeMap.Insert((uint32_t)GAME_INVALID_COSTID, {"GAME_INVALID_COSTID", "Invalid cost table id"});
		codeMap.Insert((uint32_t)GAME_INVALID_BOTTALK_TABLE, {"GAME_INVALID_BOTTALK_TABLE", "Invalid bot talk table"});
		codeMap.Insert((uint32_t)GAME_REQUEST_HAS_EXPIRED, {"GAME_REQUEST_HAS_EXPIRED", "Request has expired"});

	}//InitializeResultCode 
}//namespace ResultCode 
}//namespace SF 



