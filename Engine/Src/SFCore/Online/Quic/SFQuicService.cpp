////////////////////////////////////////////////////////////////////////////////
// 
// CopyRight (c) Kyungkun Ko
// 
// Author : KyungKun Ko
//
// Description : Autogenerated header, Engine
//
////////////////////////////////////////////////////////////////////////////////


#include "SFTypedefs.h"
#include "ResultCode/SFResultCodeSystem.h"
#include "Online/Quic/SFQuicService.h"
#include <msquic.h>
#include <openssl/x509.h>
#include <openssl/err.h>
#include "Online/HTTP/SFHTTPClientSystem.h"

namespace SF
{
    namespace Log
    {
        LogChannel Quic("Quic", ELogLevel::Debug);
    }

    namespace Service
    {
        ServiceInstance<IQuicService> Quic;
    }

    Result IQuicService::QuicStatusToResult(uint32_t status)
    {
        switch (status)
        {
        case QUIC_STATUS_SUCCESS: //	The operation completed successfully.
            return ResultCode::SUCCESS;
        case QUIC_STATUS_PENDING: //	The operation is pending.
            return ResultCode::NET_PENDING;
        case QUIC_STATUS_CONTINUE: //	The operation will continue.
            return ResultCode::NET_CONTINUE;
        case QUIC_STATUS_OUT_OF_MEMORY: //	Allocation of memory failed.
            return ResultCode::OUT_OF_MEMORY;
        case QUIC_STATUS_INVALID_PARAMETER: //	An invalid parameter was encountered.
            return ResultCode::INVALID_ARG;
        case QUIC_STATUS_INVALID_STATE: //	The current state was not valid for this operation.
            return ResultCode::INVALID_STATE;
        case QUIC_STATUS_NOT_SUPPORTED: //	The operation was not supported.
            return ResultCode::NOT_SUPPORTED;
        case QUIC_STATUS_NOT_FOUND: //	The object was not found.
            return ResultCode::OBJECT_NOT_FOUND;
        case QUIC_STATUS_BUFFER_TOO_SMALL: //	The buffer was too small for the operation.
            return ResultCode::BUFFER_OVERFLOW;
        case QUIC_STATUS_HANDSHAKE_FAILURE: //	The connection handshake failed.
            return ResultCode::NET_HANDSHAKE_FAILURE;
        case QUIC_STATUS_ABORTED: //	The connection or stream was aborted.
            return ResultCode::NET_ABORTED;
        case QUIC_STATUS_ADDRESS_IN_USE: //	The local address is already in use.
            return ResultCode::IO_ADDRINUSE;
        case QUIC_STATUS_INVALID_ADDRESS: //	Binding to socket failed, likely caused by a family mismatch between local and remote address.
            return ResultCode::IO_INVALID_ADDRESS;
        case QUIC_STATUS_CONNECTION_TIMEOUT: //	The connection timed out waiting for a response from the peer.
            return ResultCode::IO_CONNECTION_TIMEOUT;
        case QUIC_STATUS_CONNECTION_IDLE: //	The connection timed out from inactivity.
            return ResultCode::NET_TOO_LONG_IDLE;
        case QUIC_STATUS_INTERNAL_ERROR: //	An internal error was encountered.
            return ResultCode::INTERNAL_ERROR;
        case QUIC_STATUS_UNREACHABLE: //	The server is currently unreachable.
            return ResultCode::IO_NETUNREACH;
        case QUIC_STATUS_CONNECTION_REFUSED: //	The server refused the connection.
            return ResultCode::IO_CONNECTION_REFUSSED;
        case QUIC_STATUS_PROTOCOL_ERROR: //	A protocol error was encountered.
            return ResultCode::NET_PROTOCOL_ERROR;
        case QUIC_STATUS_VER_NEG_ERROR: //	A version negotiation error was encountered.
            return ResultCode::NET_VERSION_NEGOTIATION_FAILURE;
        case QUIC_STATUS_USER_CANCELED: //	The peer app / user canceled the connection during the handshake.
            return ResultCode::IO_CONNABORTED;
        case QUIC_STATUS_ALPN_NEG_FAILURE: //	The connection handshake failed to negotiate a common ALPN.
            return ResultCode::HTTP_ALPN_NEG_FAILURE;
        case QUIC_STATUS_STREAM_LIMIT_REACHED: //	A stream failed to start because the peer doesn't allow any more to be open at this time.
            return ResultCode::NET_STREAM_LIMIT_REACHED;
        default:
            SFLog(Quic, Warning, "Unknown QuicCode:{}", uint64_t(status));
            return ResultCode::UNEXPECTED;
        }
    }



}//namespace SF 



