// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SFTYPES_SF_FLAT_H_
#define FLATBUFFERS_GENERATED_SFTYPES_SF_FLAT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace SF {
namespace Flat {

struct FlatTimeSpan;

struct GenericError;
struct GenericErrorBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FlatTimeSpan FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t hours_;
  int32_t minutes_;
  int32_t seconds_;

 public:
  FlatTimeSpan()
      : hours_(0),
        minutes_(0),
        seconds_(0) {
  }
  FlatTimeSpan(int32_t _hours, int32_t _minutes, int32_t _seconds)
      : hours_(::flatbuffers::EndianScalar(_hours)),
        minutes_(::flatbuffers::EndianScalar(_minutes)),
        seconds_(::flatbuffers::EndianScalar(_seconds)) {
  }
  int32_t hours() const {
    return ::flatbuffers::EndianScalar(hours_);
  }
  int32_t minutes() const {
    return ::flatbuffers::EndianScalar(minutes_);
  }
  int32_t seconds() const {
    return ::flatbuffers::EndianScalar(seconds_);
  }
};
FLATBUFFERS_STRUCT_END(FlatTimeSpan, 12);

struct GenericError FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenericErrorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REASON = 4
  };
  const ::flatbuffers::String *reason() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REASON);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_REASON) &&
           verifier.VerifyString(reason()) &&
           verifier.EndTable();
  }
};

struct GenericErrorBuilder {
  typedef GenericError Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_reason(::flatbuffers::Offset<::flatbuffers::String> reason) {
    fbb_.AddOffset(GenericError::VT_REASON, reason);
  }
  explicit GenericErrorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenericError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenericError>(end);
    fbb_.Required(o, GenericError::VT_REASON);
    return o;
  }
};

inline ::flatbuffers::Offset<GenericError> CreateGenericError(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> reason = 0) {
  GenericErrorBuilder builder_(_fbb);
  builder_.add_reason(reason);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GenericError> CreateGenericErrorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *reason = nullptr) {
  auto reason__ = reason ? _fbb.CreateString(reason) : 0;
  return SF::Flat::CreateGenericError(
      _fbb,
      reason__);
}

}  // namespace Flat
}  // namespace SF

#endif  // FLATBUFFERS_GENERATED_SFTYPES_SF_FLAT_H_
