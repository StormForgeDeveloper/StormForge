// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMETRY_SF_FLAT_TELEMETRY_H_
#define FLATBUFFERS_GENERATED_TELEMETRY_SF_FLAT_TELEMETRY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "LocalTypes_generated.h"

namespace SF {
namespace Flat {
namespace Telemetry {

struct PostEventCmd;
struct PostEventCmdBuilder;

struct PostEventRes;
struct PostEventResBuilder;

struct PostEventCmd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PostEventCmdBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_NAME = 4,
    VT_TIME_STAMP = 6,
    VT_APP_ID = 8,
    VT_MACHINE_ID = 10,
    VT_EVENT_ID = 12,
    VT_ACCOUNT_ID = 14,
    VT_IS_PLAY_EVENT = 16,
    VT_SESSION_ID = 18,
    VT_ATTRIBUTES = 20
  };
  const ::flatbuffers::String *event_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENT_NAME);
  }
  uint64_t time_stamp() const {
    return GetField<uint64_t>(VT_TIME_STAMP, 0);
  }
  const ::flatbuffers::String *app_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APP_ID);
  }
  const ::flatbuffers::String *machine_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MACHINE_ID);
  }
  uint32_t event_id() const {
    return GetField<uint32_t>(VT_EVENT_ID, 0);
  }
  uint64_t account_id() const {
    return GetField<uint64_t>(VT_ACCOUNT_ID, 0);
  }
  bool is_play_event() const {
    return GetField<uint8_t>(VT_IS_PLAY_EVENT, 0) != 0;
  }
  const ::flatbuffers::Vector<uint8_t> *session_id() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_SESSION_ID);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<SF::Flat::NamedVariable>> *attributes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SF::Flat::NamedVariable>> *>(VT_ATTRIBUTES);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return event_name();
    else if constexpr (Index == 1) return time_stamp();
    else if constexpr (Index == 2) return app_id();
    else if constexpr (Index == 3) return machine_id();
    else if constexpr (Index == 4) return event_id();
    else if constexpr (Index == 5) return account_id();
    else if constexpr (Index == 6) return is_play_event();
    else if constexpr (Index == 7) return session_id();
    else if constexpr (Index == 8) return attributes();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_EVENT_NAME) &&
           verifier.VerifyString(event_name()) &&
           VerifyField<uint64_t>(verifier, VT_TIME_STAMP, 8) &&
           VerifyOffsetRequired(verifier, VT_APP_ID) &&
           verifier.VerifyString(app_id()) &&
           VerifyOffsetRequired(verifier, VT_MACHINE_ID) &&
           verifier.VerifyString(machine_id()) &&
           VerifyField<uint32_t>(verifier, VT_EVENT_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_ACCOUNT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_IS_PLAY_EVENT, 1) &&
           VerifyOffset(verifier, VT_SESSION_ID) &&
           verifier.VerifyVector(session_id()) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           verifier.VerifyVectorOfTables(attributes()) &&
           verifier.EndTable();
  }
};

struct PostEventCmdBuilder {
  typedef PostEventCmd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_event_name(::flatbuffers::Offset<::flatbuffers::String> event_name) {
    fbb_.AddOffset(PostEventCmd::VT_EVENT_NAME, event_name);
  }
  void add_time_stamp(uint64_t time_stamp) {
    fbb_.AddElement<uint64_t>(PostEventCmd::VT_TIME_STAMP, time_stamp, 0);
  }
  void add_app_id(::flatbuffers::Offset<::flatbuffers::String> app_id) {
    fbb_.AddOffset(PostEventCmd::VT_APP_ID, app_id);
  }
  void add_machine_id(::flatbuffers::Offset<::flatbuffers::String> machine_id) {
    fbb_.AddOffset(PostEventCmd::VT_MACHINE_ID, machine_id);
  }
  void add_event_id(uint32_t event_id) {
    fbb_.AddElement<uint32_t>(PostEventCmd::VT_EVENT_ID, event_id, 0);
  }
  void add_account_id(uint64_t account_id) {
    fbb_.AddElement<uint64_t>(PostEventCmd::VT_ACCOUNT_ID, account_id, 0);
  }
  void add_is_play_event(bool is_play_event) {
    fbb_.AddElement<uint8_t>(PostEventCmd::VT_IS_PLAY_EVENT, static_cast<uint8_t>(is_play_event), 0);
  }
  void add_session_id(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> session_id) {
    fbb_.AddOffset(PostEventCmd::VT_SESSION_ID, session_id);
  }
  void add_attributes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SF::Flat::NamedVariable>>> attributes) {
    fbb_.AddOffset(PostEventCmd::VT_ATTRIBUTES, attributes);
  }
  explicit PostEventCmdBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PostEventCmd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PostEventCmd>(end);
    fbb_.Required(o, PostEventCmd::VT_EVENT_NAME);
    fbb_.Required(o, PostEventCmd::VT_APP_ID);
    fbb_.Required(o, PostEventCmd::VT_MACHINE_ID);
    return o;
  }
};

inline ::flatbuffers::Offset<PostEventCmd> CreatePostEventCmd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> event_name = 0,
    uint64_t time_stamp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> app_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> machine_id = 0,
    uint32_t event_id = 0,
    uint64_t account_id = 0,
    bool is_play_event = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> session_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SF::Flat::NamedVariable>>> attributes = 0) {
  PostEventCmdBuilder builder_(_fbb);
  builder_.add_account_id(account_id);
  builder_.add_time_stamp(time_stamp);
  builder_.add_attributes(attributes);
  builder_.add_session_id(session_id);
  builder_.add_event_id(event_id);
  builder_.add_machine_id(machine_id);
  builder_.add_app_id(app_id);
  builder_.add_event_name(event_name);
  builder_.add_is_play_event(is_play_event);
  return builder_.Finish();
}

struct PostEventCmd::Traits {
  using type = PostEventCmd;
  static auto constexpr Create = CreatePostEventCmd;
  static constexpr auto name = "PostEventCmd";
  static constexpr auto fully_qualified_name = "SF.Flat.Telemetry.PostEventCmd";
  static constexpr size_t fields_number = 9;
  static constexpr std::array<const char *, fields_number> field_names = {
    "event_name",
    "time_stamp",
    "app_id",
    "machine_id",
    "event_id",
    "account_id",
    "is_play_event",
    "session_id",
    "attributes"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<PostEventCmd> CreatePostEventCmdDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *event_name = nullptr,
    uint64_t time_stamp = 0,
    const char *app_id = nullptr,
    const char *machine_id = nullptr,
    uint32_t event_id = 0,
    uint64_t account_id = 0,
    bool is_play_event = false,
    const std::vector<uint8_t> *session_id = nullptr,
    const std::vector<::flatbuffers::Offset<SF::Flat::NamedVariable>> *attributes = nullptr) {
  auto event_name__ = event_name ? _fbb.CreateString(event_name) : 0;
  auto app_id__ = app_id ? _fbb.CreateString(app_id) : 0;
  auto machine_id__ = machine_id ? _fbb.CreateString(machine_id) : 0;
  auto session_id__ = session_id ? _fbb.CreateVector<uint8_t>(*session_id) : 0;
  auto attributes__ = attributes ? _fbb.CreateVector<::flatbuffers::Offset<SF::Flat::NamedVariable>>(*attributes) : 0;
  return SF::Flat::Telemetry::CreatePostEventCmd(
      _fbb,
      event_name__,
      time_stamp,
      app_id__,
      machine_id__,
      event_id,
      account_id,
      is_play_event,
      session_id__,
      attributes__);
}

struct PostEventRes FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PostEventResBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4
  };
  uint32_t result() const {
    return GetField<uint32_t>(VT_RESULT, 0);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return result();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT, 4) &&
           verifier.EndTable();
  }
};

struct PostEventResBuilder {
  typedef PostEventRes Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(uint32_t result) {
    fbb_.AddElement<uint32_t>(PostEventRes::VT_RESULT, result, 0);
  }
  explicit PostEventResBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PostEventRes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PostEventRes>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PostEventRes> CreatePostEventRes(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t result = 0) {
  PostEventResBuilder builder_(_fbb);
  builder_.add_result(result);
  return builder_.Finish();
}

struct PostEventRes::Traits {
  using type = PostEventRes;
  static auto constexpr Create = CreatePostEventRes;
  static constexpr auto name = "PostEventRes";
  static constexpr auto fully_qualified_name = "SF.Flat.Telemetry.PostEventRes";
  static constexpr size_t fields_number = 1;
  static constexpr std::array<const char *, fields_number> field_names = {
    "result"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline const SF::Flat::Telemetry::PostEventRes *GetPostEventRes(const void *buf) {
  return ::flatbuffers::GetRoot<SF::Flat::Telemetry::PostEventRes>(buf);
}

inline const SF::Flat::Telemetry::PostEventRes *GetSizePrefixedPostEventRes(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SF::Flat::Telemetry::PostEventRes>(buf);
}

inline bool VerifyPostEventResBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SF::Flat::Telemetry::PostEventRes>(nullptr);
}

inline bool VerifySizePrefixedPostEventResBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SF::Flat::Telemetry::PostEventRes>(nullptr);
}

inline void FinishPostEventResBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SF::Flat::Telemetry::PostEventRes> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPostEventResBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SF::Flat::Telemetry::PostEventRes> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Telemetry
}  // namespace Flat
}  // namespace SF

#endif  // FLATBUFFERS_GENERATED_TELEMETRY_SF_FLAT_TELEMETRY_H_
