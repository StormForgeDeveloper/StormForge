// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGIN_SF_FLAT_LOGIN_H_
#define FLATBUFFERS_GENERATED_LOGIN_SF_FLAT_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace SF {
namespace Flat {
namespace Login {

struct LoginPacket;
struct LoginPacketBuilder;

struct GenericError;
struct GenericErrorBuilder;

struct LoginRequest;
struct LoginRequestBuilder;

struct LoginResult;
struct LoginResultBuilder;

struct LoginWithSteamRequest;
struct LoginWithSteamRequestBuilder;

struct LoginWithSteamResult;
struct LoginWithSteamResultBuilder;

enum PayloadData : uint8_t {
  PayloadData_NONE = 0,
  PayloadData_GenericError = 1,
  PayloadData_LoginRequest = 2,
  PayloadData_LoginResult = 3,
  PayloadData_LoginWithSteamRequest = 4,
  PayloadData_LoginWithSteamResult = 5,
  PayloadData_MIN = PayloadData_NONE,
  PayloadData_MAX = PayloadData_LoginWithSteamResult
};

inline const PayloadData (&EnumValuesPayloadData())[6] {
  static const PayloadData values[] = {
    PayloadData_NONE,
    PayloadData_GenericError,
    PayloadData_LoginRequest,
    PayloadData_LoginResult,
    PayloadData_LoginWithSteamRequest,
    PayloadData_LoginWithSteamResult
  };
  return values;
}

inline const char * const *EnumNamesPayloadData() {
  static const char * const names[7] = {
    "NONE",
    "GenericError",
    "LoginRequest",
    "LoginResult",
    "LoginWithSteamRequest",
    "LoginWithSteamResult",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayloadData(PayloadData e) {
  if (::flatbuffers::IsOutRange(e, PayloadData_NONE, PayloadData_LoginWithSteamResult)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPayloadData()[index];
}

template<typename T> struct PayloadDataTraits {
  static const PayloadData enum_value = PayloadData_NONE;
};

template<> struct PayloadDataTraits<SF::Flat::Login::GenericError> {
  static const PayloadData enum_value = PayloadData_GenericError;
};

template<> struct PayloadDataTraits<SF::Flat::Login::LoginRequest> {
  static const PayloadData enum_value = PayloadData_LoginRequest;
};

template<> struct PayloadDataTraits<SF::Flat::Login::LoginResult> {
  static const PayloadData enum_value = PayloadData_LoginResult;
};

template<> struct PayloadDataTraits<SF::Flat::Login::LoginWithSteamRequest> {
  static const PayloadData enum_value = PayloadData_LoginWithSteamRequest;
};

template<> struct PayloadDataTraits<SF::Flat::Login::LoginWithSteamResult> {
  static const PayloadData enum_value = PayloadData_LoginWithSteamResult;
};

bool VerifyPayloadData(::flatbuffers::Verifier &verifier, const void *obj, PayloadData type);
bool VerifyPayloadDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct LoginPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_ID = 4,
    VT_PAYLOAD_DATA_TYPE = 6,
    VT_PAYLOAD_DATA = 8
  };
  uint32_t request_id() const {
    return GetField<uint32_t>(VT_REQUEST_ID, 0);
  }
  SF::Flat::Login::PayloadData payload_data_type() const {
    return static_cast<SF::Flat::Login::PayloadData>(GetField<uint8_t>(VT_PAYLOAD_DATA_TYPE, 0));
  }
  const void *payload_data() const {
    return GetPointer<const void *>(VT_PAYLOAD_DATA);
  }
  template<typename T> const T *payload_data_as() const;
  const SF::Flat::Login::GenericError *payload_data_as_GenericError() const {
    return payload_data_type() == SF::Flat::Login::PayloadData_GenericError ? static_cast<const SF::Flat::Login::GenericError *>(payload_data()) : nullptr;
  }
  const SF::Flat::Login::LoginRequest *payload_data_as_LoginRequest() const {
    return payload_data_type() == SF::Flat::Login::PayloadData_LoginRequest ? static_cast<const SF::Flat::Login::LoginRequest *>(payload_data()) : nullptr;
  }
  const SF::Flat::Login::LoginResult *payload_data_as_LoginResult() const {
    return payload_data_type() == SF::Flat::Login::PayloadData_LoginResult ? static_cast<const SF::Flat::Login::LoginResult *>(payload_data()) : nullptr;
  }
  const SF::Flat::Login::LoginWithSteamRequest *payload_data_as_LoginWithSteamRequest() const {
    return payload_data_type() == SF::Flat::Login::PayloadData_LoginWithSteamRequest ? static_cast<const SF::Flat::Login::LoginWithSteamRequest *>(payload_data()) : nullptr;
  }
  const SF::Flat::Login::LoginWithSteamResult *payload_data_as_LoginWithSteamResult() const {
    return payload_data_type() == SF::Flat::Login::PayloadData_LoginWithSteamResult ? static_cast<const SF::Flat::Login::LoginWithSteamResult *>(payload_data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_DATA_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_PAYLOAD_DATA) &&
           VerifyPayloadData(verifier, payload_data(), payload_data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const SF::Flat::Login::GenericError *LoginPacket::payload_data_as<SF::Flat::Login::GenericError>() const {
  return payload_data_as_GenericError();
}

template<> inline const SF::Flat::Login::LoginRequest *LoginPacket::payload_data_as<SF::Flat::Login::LoginRequest>() const {
  return payload_data_as_LoginRequest();
}

template<> inline const SF::Flat::Login::LoginResult *LoginPacket::payload_data_as<SF::Flat::Login::LoginResult>() const {
  return payload_data_as_LoginResult();
}

template<> inline const SF::Flat::Login::LoginWithSteamRequest *LoginPacket::payload_data_as<SF::Flat::Login::LoginWithSteamRequest>() const {
  return payload_data_as_LoginWithSteamRequest();
}

template<> inline const SF::Flat::Login::LoginWithSteamResult *LoginPacket::payload_data_as<SF::Flat::Login::LoginWithSteamResult>() const {
  return payload_data_as_LoginWithSteamResult();
}

struct LoginPacketBuilder {
  typedef LoginPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_id(uint32_t request_id) {
    fbb_.AddElement<uint32_t>(LoginPacket::VT_REQUEST_ID, request_id, 0);
  }
  void add_payload_data_type(SF::Flat::Login::PayloadData payload_data_type) {
    fbb_.AddElement<uint8_t>(LoginPacket::VT_PAYLOAD_DATA_TYPE, static_cast<uint8_t>(payload_data_type), 0);
  }
  void add_payload_data(::flatbuffers::Offset<void> payload_data) {
    fbb_.AddOffset(LoginPacket::VT_PAYLOAD_DATA, payload_data);
  }
  explicit LoginPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginPacket>(end);
    fbb_.Required(o, LoginPacket::VT_PAYLOAD_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginPacket> CreateLoginPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_id = 0,
    SF::Flat::Login::PayloadData payload_data_type = SF::Flat::Login::PayloadData_NONE,
    ::flatbuffers::Offset<void> payload_data = 0) {
  LoginPacketBuilder builder_(_fbb);
  builder_.add_payload_data(payload_data);
  builder_.add_request_id(request_id);
  builder_.add_payload_data_type(payload_data_type);
  return builder_.Finish();
}

struct GenericError FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenericErrorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REASON = 4
  };
  const ::flatbuffers::String *reason() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REASON);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_REASON) &&
           verifier.VerifyString(reason()) &&
           verifier.EndTable();
  }
};

struct GenericErrorBuilder {
  typedef GenericError Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_reason(::flatbuffers::Offset<::flatbuffers::String> reason) {
    fbb_.AddOffset(GenericError::VT_REASON, reason);
  }
  explicit GenericErrorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenericError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenericError>(end);
    fbb_.Required(o, GenericError::VT_REASON);
    return o;
  }
};

inline ::flatbuffers::Offset<GenericError> CreateGenericError(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> reason = 0) {
  GenericErrorBuilder builder_(_fbb);
  builder_.add_reason(reason);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GenericError> CreateGenericErrorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *reason = nullptr) {
  auto reason__ = reason ? _fbb.CreateString(reason) : 0;
  return SF::Flat::Login::CreateGenericError(
      _fbb,
      reason__);
}

struct LoginRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PASSWORD = 6,
    VT_GAME_ID = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  const ::flatbuffers::String *game_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GAME_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyOffsetRequired(verifier, VT_GAME_ID) &&
           verifier.VerifyString(game_id()) &&
           verifier.EndTable();
  }
};

struct LoginRequestBuilder {
  typedef LoginRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(LoginRequest::VT_NAME, name);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(LoginRequest::VT_PASSWORD, password);
  }
  void add_game_id(::flatbuffers::Offset<::flatbuffers::String> game_id) {
    fbb_.AddOffset(LoginRequest::VT_GAME_ID, game_id);
  }
  explicit LoginRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginRequest>(end);
    fbb_.Required(o, LoginRequest::VT_NAME);
    fbb_.Required(o, LoginRequest::VT_PASSWORD);
    fbb_.Required(o, LoginRequest::VT_GAME_ID);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginRequest> CreateLoginRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0,
    ::flatbuffers::Offset<::flatbuffers::String> game_id = 0) {
  LoginRequestBuilder builder_(_fbb);
  builder_.add_game_id(game_id);
  builder_.add_password(password);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginRequest> CreateLoginRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *password = nullptr,
    const char *game_id = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  auto game_id__ = game_id ? _fbb.CreateString(game_id) : 0;
  return SF::Flat::Login::CreateLoginRequest(
      _fbb,
      name__,
      password__,
      game_id__);
}

struct LoginResult FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4,
    VT_ACCOUNT_ID = 6,
    VT_AUTH_TICKET = 8
  };
  uint32_t result_code() const {
    return GetField<uint32_t>(VT_RESULT_CODE, 0);
  }
  uint64_t account_id() const {
    return GetField<uint64_t>(VT_ACCOUNT_ID, 0);
  }
  uint64_t auth_ticket() const {
    return GetField<uint64_t>(VT_AUTH_TICKET, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           VerifyField<uint64_t>(verifier, VT_ACCOUNT_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_AUTH_TICKET, 8) &&
           verifier.EndTable();
  }
};

struct LoginResultBuilder {
  typedef LoginResult Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(uint32_t result_code) {
    fbb_.AddElement<uint32_t>(LoginResult::VT_RESULT_CODE, result_code, 0);
  }
  void add_account_id(uint64_t account_id) {
    fbb_.AddElement<uint64_t>(LoginResult::VT_ACCOUNT_ID, account_id, 0);
  }
  void add_auth_ticket(uint64_t auth_ticket) {
    fbb_.AddElement<uint64_t>(LoginResult::VT_AUTH_TICKET, auth_ticket, 0);
  }
  explicit LoginResultBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginResult>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginResult> CreateLoginResult(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t result_code = 0,
    uint64_t account_id = 0,
    uint64_t auth_ticket = 0) {
  LoginResultBuilder builder_(_fbb);
  builder_.add_auth_ticket(auth_ticket);
  builder_.add_account_id(account_id);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

struct LoginWithSteamRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginWithSteamRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_APP_ID = 4,
    VT_STEAM_ID = 6,
    VT_STEAM_PLAYER_NAME = 8,
    VT_STEAM_USER_TOKEN = 10,
    VT_GAME_ID = 12,
    VT_UID = 14
  };
  uint64_t app_id() const {
    return GetField<uint64_t>(VT_APP_ID, 0);
  }
  uint64_t steam_id() const {
    return GetField<uint64_t>(VT_STEAM_ID, 0);
  }
  const ::flatbuffers::String *steam_player_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STEAM_PLAYER_NAME);
  }
  const ::flatbuffers::String *steam_user_token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STEAM_USER_TOKEN);
  }
  const ::flatbuffers::String *game_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GAME_ID);
  }
  uint64_t uid() const {
    return GetField<uint64_t>(VT_UID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_APP_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_STEAM_ID, 8) &&
           VerifyOffsetRequired(verifier, VT_STEAM_PLAYER_NAME) &&
           verifier.VerifyString(steam_player_name()) &&
           VerifyOffsetRequired(verifier, VT_STEAM_USER_TOKEN) &&
           verifier.VerifyString(steam_user_token()) &&
           VerifyOffsetRequired(verifier, VT_GAME_ID) &&
           verifier.VerifyString(game_id()) &&
           VerifyField<uint64_t>(verifier, VT_UID, 8) &&
           verifier.EndTable();
  }
};

struct LoginWithSteamRequestBuilder {
  typedef LoginWithSteamRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_app_id(uint64_t app_id) {
    fbb_.AddElement<uint64_t>(LoginWithSteamRequest::VT_APP_ID, app_id, 0);
  }
  void add_steam_id(uint64_t steam_id) {
    fbb_.AddElement<uint64_t>(LoginWithSteamRequest::VT_STEAM_ID, steam_id, 0);
  }
  void add_steam_player_name(::flatbuffers::Offset<::flatbuffers::String> steam_player_name) {
    fbb_.AddOffset(LoginWithSteamRequest::VT_STEAM_PLAYER_NAME, steam_player_name);
  }
  void add_steam_user_token(::flatbuffers::Offset<::flatbuffers::String> steam_user_token) {
    fbb_.AddOffset(LoginWithSteamRequest::VT_STEAM_USER_TOKEN, steam_user_token);
  }
  void add_game_id(::flatbuffers::Offset<::flatbuffers::String> game_id) {
    fbb_.AddOffset(LoginWithSteamRequest::VT_GAME_ID, game_id);
  }
  void add_uid(uint64_t uid) {
    fbb_.AddElement<uint64_t>(LoginWithSteamRequest::VT_UID, uid, 0);
  }
  explicit LoginWithSteamRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginWithSteamRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginWithSteamRequest>(end);
    fbb_.Required(o, LoginWithSteamRequest::VT_STEAM_PLAYER_NAME);
    fbb_.Required(o, LoginWithSteamRequest::VT_STEAM_USER_TOKEN);
    fbb_.Required(o, LoginWithSteamRequest::VT_GAME_ID);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginWithSteamRequest> CreateLoginWithSteamRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t app_id = 0,
    uint64_t steam_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> steam_player_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> steam_user_token = 0,
    ::flatbuffers::Offset<::flatbuffers::String> game_id = 0,
    uint64_t uid = 0) {
  LoginWithSteamRequestBuilder builder_(_fbb);
  builder_.add_uid(uid);
  builder_.add_steam_id(steam_id);
  builder_.add_app_id(app_id);
  builder_.add_game_id(game_id);
  builder_.add_steam_user_token(steam_user_token);
  builder_.add_steam_player_name(steam_player_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoginWithSteamRequest> CreateLoginWithSteamRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t app_id = 0,
    uint64_t steam_id = 0,
    const char *steam_player_name = nullptr,
    const char *steam_user_token = nullptr,
    const char *game_id = nullptr,
    uint64_t uid = 0) {
  auto steam_player_name__ = steam_player_name ? _fbb.CreateString(steam_player_name) : 0;
  auto steam_user_token__ = steam_user_token ? _fbb.CreateString(steam_user_token) : 0;
  auto game_id__ = game_id ? _fbb.CreateString(game_id) : 0;
  return SF::Flat::Login::CreateLoginWithSteamRequest(
      _fbb,
      app_id,
      steam_id,
      steam_player_name__,
      steam_user_token__,
      game_id__,
      uid);
}

struct LoginWithSteamResult FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoginWithSteamResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_CODE = 4,
    VT_ACCOUNT_ID = 6,
    VT_AUTH_TICKET = 8
  };
  uint32_t result_code() const {
    return GetField<uint32_t>(VT_RESULT_CODE, 0);
  }
  uint64_t account_id() const {
    return GetField<uint64_t>(VT_ACCOUNT_ID, 0);
  }
  uint64_t auth_ticket() const {
    return GetField<uint64_t>(VT_AUTH_TICKET, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RESULT_CODE, 4) &&
           VerifyField<uint64_t>(verifier, VT_ACCOUNT_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_AUTH_TICKET, 8) &&
           verifier.EndTable();
  }
};

struct LoginWithSteamResultBuilder {
  typedef LoginWithSteamResult Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_code(uint32_t result_code) {
    fbb_.AddElement<uint32_t>(LoginWithSteamResult::VT_RESULT_CODE, result_code, 0);
  }
  void add_account_id(uint64_t account_id) {
    fbb_.AddElement<uint64_t>(LoginWithSteamResult::VT_ACCOUNT_ID, account_id, 0);
  }
  void add_auth_ticket(uint64_t auth_ticket) {
    fbb_.AddElement<uint64_t>(LoginWithSteamResult::VT_AUTH_TICKET, auth_ticket, 0);
  }
  explicit LoginWithSteamResultBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoginWithSteamResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoginWithSteamResult>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoginWithSteamResult> CreateLoginWithSteamResult(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t result_code = 0,
    uint64_t account_id = 0,
    uint64_t auth_ticket = 0) {
  LoginWithSteamResultBuilder builder_(_fbb);
  builder_.add_auth_ticket(auth_ticket);
  builder_.add_account_id(account_id);
  builder_.add_result_code(result_code);
  return builder_.Finish();
}

inline bool VerifyPayloadData(::flatbuffers::Verifier &verifier, const void *obj, PayloadData type) {
  switch (type) {
    case PayloadData_NONE: {
      return true;
    }
    case PayloadData_GenericError: {
      auto ptr = reinterpret_cast<const SF::Flat::Login::GenericError *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PayloadData_LoginRequest: {
      auto ptr = reinterpret_cast<const SF::Flat::Login::LoginRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PayloadData_LoginResult: {
      auto ptr = reinterpret_cast<const SF::Flat::Login::LoginResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PayloadData_LoginWithSteamRequest: {
      auto ptr = reinterpret_cast<const SF::Flat::Login::LoginWithSteamRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PayloadData_LoginWithSteamResult: {
      auto ptr = reinterpret_cast<const SF::Flat::Login::LoginWithSteamResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPayloadDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayloadData(
        verifier,  values->Get(i), types->GetEnum<PayloadData>(i))) {
      return false;
    }
  }
  return true;
}

inline const SF::Flat::Login::LoginPacket *GetLoginPacket(const void *buf) {
  return ::flatbuffers::GetRoot<SF::Flat::Login::LoginPacket>(buf);
}

inline const SF::Flat::Login::LoginPacket *GetSizePrefixedLoginPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SF::Flat::Login::LoginPacket>(buf);
}

inline bool VerifyLoginPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SF::Flat::Login::LoginPacket>(nullptr);
}

inline bool VerifySizePrefixedLoginPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SF::Flat::Login::LoginPacket>(nullptr);
}

inline void FinishLoginPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SF::Flat::Login::LoginPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoginPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SF::Flat::Login::LoginPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Login
}  // namespace Flat
}  // namespace SF

#endif  // FLATBUFFERS_GENERATED_LOGIN_SF_FLAT_LOGIN_H_
