// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GENERIC_SF_FLAT_GENERIC_H_
#define FLATBUFFERS_GENERATED_GENERIC_SF_FLAT_GENERIC_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "SFTypes_generated.h"

namespace SF {
namespace Flat {
namespace Generic {

struct GenericFailureCmd;
struct GenericFailureCmdBuilder;

struct GenericFailureRes;
struct GenericFailureResBuilder;

struct GenericTransactionCmd;
struct GenericTransactionCmdBuilder;

struct GenericTransactionRes;
struct GenericTransactionResBuilder;

struct HeartbeatCmd;
struct HeartbeatCmdBuilder;

struct HeartbeatRes;
struct HeartbeatResBuilder;

struct PostLogDataCmd;
struct PostLogDataCmdBuilder;

struct PostLogDataRes;
struct PostLogDataResBuilder;

struct GenericFailureCmd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenericFailureCmdBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GenericFailureCmdBuilder {
  typedef GenericFailureCmd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit GenericFailureCmdBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenericFailureCmd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenericFailureCmd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GenericFailureCmd> CreateGenericFailureCmd(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  GenericFailureCmdBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GenericFailureCmd::Traits {
  using type = GenericFailureCmd;
  static auto constexpr Create = CreateGenericFailureCmd;
  static constexpr auto name = "GenericFailureCmd";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.GenericFailureCmd";
  static constexpr size_t fields_number = 0;
  static constexpr std::array<const char *, fields_number> field_names = {};
};

struct GenericFailureRes FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenericFailureResBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GenericFailureResBuilder {
  typedef GenericFailureRes Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit GenericFailureResBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenericFailureRes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenericFailureRes>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GenericFailureRes> CreateGenericFailureRes(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  GenericFailureResBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GenericFailureRes::Traits {
  using type = GenericFailureRes;
  static auto constexpr Create = CreateGenericFailureRes;
  static constexpr auto name = "GenericFailureRes";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.GenericFailureRes";
  static constexpr size_t fields_number = 0;
  static constexpr std::array<const char *, fields_number> field_names = {};
};

struct GenericTransactionCmd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenericTransactionCmdBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GenericTransactionCmdBuilder {
  typedef GenericTransactionCmd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit GenericTransactionCmdBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenericTransactionCmd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenericTransactionCmd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GenericTransactionCmd> CreateGenericTransactionCmd(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  GenericTransactionCmdBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GenericTransactionCmd::Traits {
  using type = GenericTransactionCmd;
  static auto constexpr Create = CreateGenericTransactionCmd;
  static constexpr auto name = "GenericTransactionCmd";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.GenericTransactionCmd";
  static constexpr size_t fields_number = 0;
  static constexpr std::array<const char *, fields_number> field_names = {};
};

struct GenericTransactionRes FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenericTransactionResBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FINISHED_TRANSACTION = 4,
    VT_SIGNATURE = 6
  };
  const SF::Flat::TransactionID *finished_transaction() const {
    return GetStruct<const SF::Flat::TransactionID *>(VT_FINISHED_TRANSACTION);
  }
  const ::flatbuffers::String *signature() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SIGNATURE);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return finished_transaction();
    else if constexpr (Index == 1) return signature();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<SF::Flat::TransactionID>(verifier, VT_FINISHED_TRANSACTION, 8) &&
           VerifyOffset(verifier, VT_SIGNATURE) &&
           verifier.VerifyString(signature()) &&
           verifier.EndTable();
  }
};

struct GenericTransactionResBuilder {
  typedef GenericTransactionRes Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_finished_transaction(const SF::Flat::TransactionID *finished_transaction) {
    fbb_.AddStruct(GenericTransactionRes::VT_FINISHED_TRANSACTION, finished_transaction);
  }
  void add_signature(::flatbuffers::Offset<::flatbuffers::String> signature) {
    fbb_.AddOffset(GenericTransactionRes::VT_SIGNATURE, signature);
  }
  explicit GenericTransactionResBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenericTransactionRes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenericTransactionRes>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GenericTransactionRes> CreateGenericTransactionRes(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const SF::Flat::TransactionID *finished_transaction = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> signature = 0) {
  GenericTransactionResBuilder builder_(_fbb);
  builder_.add_signature(signature);
  builder_.add_finished_transaction(finished_transaction);
  return builder_.Finish();
}

struct GenericTransactionRes::Traits {
  using type = GenericTransactionRes;
  static auto constexpr Create = CreateGenericTransactionRes;
  static constexpr auto name = "GenericTransactionRes";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.GenericTransactionRes";
  static constexpr size_t fields_number = 2;
  static constexpr std::array<const char *, fields_number> field_names = {
    "finished_transaction",
    "signature"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<GenericTransactionRes> CreateGenericTransactionResDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const SF::Flat::TransactionID *finished_transaction = nullptr,
    const char *signature = nullptr) {
  auto signature__ = signature ? _fbb.CreateString(signature) : 0;
  return SF::Flat::Generic::CreateGenericTransactionRes(
      _fbb,
      finished_transaction,
      signature__);
}

struct HeartbeatCmd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeartbeatCmdBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HeartbeatCmdBuilder {
  typedef HeartbeatCmd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit HeartbeatCmdBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HeartbeatCmd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HeartbeatCmd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HeartbeatCmd> CreateHeartbeatCmd(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  HeartbeatCmdBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HeartbeatCmd::Traits {
  using type = HeartbeatCmd;
  static auto constexpr Create = CreateHeartbeatCmd;
  static constexpr auto name = "HeartbeatCmd";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.HeartbeatCmd";
  static constexpr size_t fields_number = 0;
  static constexpr std::array<const char *, fields_number> field_names = {};
};

struct HeartbeatRes FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeartbeatResBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HeartbeatResBuilder {
  typedef HeartbeatRes Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit HeartbeatResBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HeartbeatRes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HeartbeatRes>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HeartbeatRes> CreateHeartbeatRes(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  HeartbeatResBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HeartbeatRes::Traits {
  using type = HeartbeatRes;
  static auto constexpr Create = CreateHeartbeatRes;
  static constexpr auto name = "HeartbeatRes";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.HeartbeatRes";
  static constexpr size_t fields_number = 0;
  static constexpr std::array<const char *, fields_number> field_names = {};
};

struct PostLogDataCmd FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PostLogDataCmdBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEST_LOG_CHANNEL = 4,
    VT_MESSAGE_DATA = 6
  };
  const ::flatbuffers::String *dest_log_channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEST_LOG_CHANNEL);
  }
  const ::flatbuffers::Vector<uint8_t> *message_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MESSAGE_DATA);
  }
  template<size_t Index>
  auto get_field() const {
         if constexpr (Index == 0) return dest_log_channel();
    else if constexpr (Index == 1) return message_data();
    else static_assert(Index != Index, "Invalid Field Index");
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEST_LOG_CHANNEL) &&
           verifier.VerifyString(dest_log_channel()) &&
           VerifyOffset(verifier, VT_MESSAGE_DATA) &&
           verifier.VerifyVector(message_data()) &&
           verifier.EndTable();
  }
};

struct PostLogDataCmdBuilder {
  typedef PostLogDataCmd Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dest_log_channel(::flatbuffers::Offset<::flatbuffers::String> dest_log_channel) {
    fbb_.AddOffset(PostLogDataCmd::VT_DEST_LOG_CHANNEL, dest_log_channel);
  }
  void add_message_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> message_data) {
    fbb_.AddOffset(PostLogDataCmd::VT_MESSAGE_DATA, message_data);
  }
  explicit PostLogDataCmdBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PostLogDataCmd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PostLogDataCmd>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PostLogDataCmd> CreatePostLogDataCmd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> dest_log_channel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> message_data = 0) {
  PostLogDataCmdBuilder builder_(_fbb);
  builder_.add_message_data(message_data);
  builder_.add_dest_log_channel(dest_log_channel);
  return builder_.Finish();
}

struct PostLogDataCmd::Traits {
  using type = PostLogDataCmd;
  static auto constexpr Create = CreatePostLogDataCmd;
  static constexpr auto name = "PostLogDataCmd";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.PostLogDataCmd";
  static constexpr size_t fields_number = 2;
  static constexpr std::array<const char *, fields_number> field_names = {
    "dest_log_channel",
    "message_data"
  };
  template<size_t Index>
  using FieldType = decltype(std::declval<type>().get_field<Index>());
};

inline ::flatbuffers::Offset<PostLogDataCmd> CreatePostLogDataCmdDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *dest_log_channel = nullptr,
    const std::vector<uint8_t> *message_data = nullptr) {
  auto dest_log_channel__ = dest_log_channel ? _fbb.CreateString(dest_log_channel) : 0;
  auto message_data__ = message_data ? _fbb.CreateVector<uint8_t>(*message_data) : 0;
  return SF::Flat::Generic::CreatePostLogDataCmd(
      _fbb,
      dest_log_channel__,
      message_data__);
}

struct PostLogDataRes FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PostLogDataResBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PostLogDataResBuilder {
  typedef PostLogDataRes Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PostLogDataResBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PostLogDataRes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PostLogDataRes>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PostLogDataRes> CreatePostLogDataRes(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PostLogDataResBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PostLogDataRes::Traits {
  using type = PostLogDataRes;
  static auto constexpr Create = CreatePostLogDataRes;
  static constexpr auto name = "PostLogDataRes";
  static constexpr auto fully_qualified_name = "SF.Flat.Generic.PostLogDataRes";
  static constexpr size_t fields_number = 0;
  static constexpr std::array<const char *, fields_number> field_names = {};
};

inline const SF::Flat::Generic::PostLogDataRes *GetPostLogDataRes(const void *buf) {
  return ::flatbuffers::GetRoot<SF::Flat::Generic::PostLogDataRes>(buf);
}

inline const SF::Flat::Generic::PostLogDataRes *GetSizePrefixedPostLogDataRes(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SF::Flat::Generic::PostLogDataRes>(buf);
}

inline bool VerifyPostLogDataResBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SF::Flat::Generic::PostLogDataRes>(nullptr);
}

inline bool VerifySizePrefixedPostLogDataResBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SF::Flat::Generic::PostLogDataRes>(nullptr);
}

inline void FinishPostLogDataResBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SF::Flat::Generic::PostLogDataRes> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPostLogDataResBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SF::Flat::Generic::PostLogDataRes> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Generic
}  // namespace Flat
}  // namespace SF

#endif  // FLATBUFFERS_GENERATED_GENERIC_SF_FLAT_GENERIC_H_
